
bin/Debug/TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000d3a  00000dce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000199  00800134  00800134  00000e02  2**0
                  ALLOC
  3 .stab         000035b8  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000304b  00000000  00000000  000043bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007407  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3c       	cpi	r26, 0xCD	; 205
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 51 06 	call	0xca2	; 0xca2 <main>
  9e:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <nrf24_init>:
uint8_t payload_len;

/* init the hardware pins */
void nrf24_init()
{
    nrf24_setupPins();
  a6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

000000b6 <nrf24_payload_length>:

/* Returns the payload length */
uint8_t nrf24_payload_length()
{
    return payload_len;
}
  b6:	80 91 37 01 	lds	r24, 0x0137
  ba:	08 95       	ret

000000bc <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	08 2f       	mov	r16, r24
    uint8_t i = 0;
    uint8_t rx = 0;

    nrf24_sck_digitalWrite(LOW);
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 82 03 	call	0x704	; 0x704 <nrf24_sck_digitalWrite>
  ce:	c7 e0       	ldi	r28, 0x07	; 7
  d0:	d0 e0       	ldi	r29, 0x00	; 0

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
    uint8_t i = 0;
    uint8_t rx = 0;
  d2:	f1 2c       	mov	r15, r1
    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
    {

        if(tx & (1<<(7-i)))
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	98 01       	movw	r18, r16
  d8:	0c 2e       	mov	r0, r28
  da:	02 c0       	rjmp	.+4      	; 0xe0 <spi_transfer+0x24>
  dc:	35 95       	asr	r19
  de:	27 95       	ror	r18
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <spi_transfer+0x20>
  e4:	20 ff       	sbrs	r18, 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <spi_transfer+0x30>
        {
            nrf24_mosi_digitalWrite(HIGH);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <spi_transfer+0x32>
        }
        else
        {
            nrf24_mosi_digitalWrite(LOW);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 88 03 	call	0x710	; 0x710 <nrf24_mosi_digitalWrite>
        }

        nrf24_sck_digitalWrite(HIGH);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 82 03 	call	0x704	; 0x704 <nrf24_sck_digitalWrite>

        rx = rx << 1;
  f8:	ff 0c       	add	r15, r15
        if(nrf24_miso_digitalRead())
  fa:	0e 94 8e 03 	call	0x71c	; 0x71c <nrf24_miso_digitalRead>
  fe:	88 23       	and	r24, r24
 100:	11 f0       	breq	.+4      	; 0x106 <spi_transfer+0x4a>
        {
            rx |= 0x01;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	f8 2a       	or	r15, r24
        }

        nrf24_sck_digitalWrite(LOW);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 82 03 	call	0x704	; 0x704 <nrf24_sck_digitalWrite>
 10c:	21 97       	sbiw	r28, 0x01	; 1
 10e:	18 f7       	brcc	.-58     	; 0xd6 <spi_transfer+0x1a>

    }

    return rx;
}
 110:	8f 2d       	mov	r24, r15
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	ff 90       	pop	r15
 11c:	08 95       	ret

0000011e <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
 11e:	cf 93       	push	r28
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
 12c:	c8 2f       	mov	r28, r24
    nrf24_csn_digitalWrite(HIGH);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>
    return rv;
}
 134:	8c 2f       	mov	r24, r28
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
    uint8_t rv;

    rv = nrf24_getStatus();
 13a:	0e 94 8f 00 	call	0x11e	; 0x11e <nrf24_getStatus>

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
 13e:	85 fd       	sbrc	r24, 5
 140:	04 c0       	rjmp	.+8      	; 0x14a <nrf24_lastMessageStatus+0x10>
    {
        return NRF24_TRANSMISSON_OK;
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
 142:	84 ff       	sbrs	r24, 4
 144:	04 c0       	rjmp	.+8      	; 0x14e <nrf24_lastMessageStatus+0x14>
    {
        return NRF24_MESSAGE_LOST;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret
    rv = nrf24_getStatus();

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
    {
        return NRF24_TRANSMISSON_OK;
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
        return NRF24_MESSAGE_LOST;
    }
    /* Probably still sending ... */
    else
    {
        return 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
 150:	08 95       	ret

00000152 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
 152:	0e 94 8f 00 	call	0x11e	; 0x11e <nrf24_getStatus>

    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 156:	98 2f       	mov	r25, r24
 158:	90 73       	andi	r25, 0x30	; 48
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	09 f0       	breq	.+2      	; 0x160 <nrf24_isSending+0xe>
 15e:	80 e0       	ldi	r24, 0x00	; 0
        return 0; /* false */
    }

    return 1; /* true */

}
 160:	08 95       	ret

00000162 <nrf24_payloadLength>:
    return (fifoStatus & (1 << RX_EMPTY));
}

/* Returns the length of data waiting in the RX fifo */
uint8_t nrf24_payloadLength()
{
 162:	cf 93       	push	r28
    uint8_t status;
    nrf24_csn_digitalWrite(LOW);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>
    spi_transfer(R_RX_PL_WID);
 16a:	80 e6       	ldi	r24, 0x60	; 96
 16c:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    status = spi_transfer(0x00);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
 176:	c8 2f       	mov	r28, r24
    nrf24_csn_digitalWrite(HIGH);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>
    return status;
}
 17e:	8c 2f       	mov	r24, r28
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <nrf24_transferSync1>:
    }

    return rx;
}
void nrf24_transferSync1(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	1f 92       	push	r1
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
 198:	f8 2e       	mov	r15, r24
 19a:	8b 01       	movw	r16, r22
    uint8_t i;

    for(i=0;i<len;i++)
 19c:	c8 2e       	mov	r12, r24
 19e:	d9 2e       	mov	r13, r25
 1a0:	0a c0       	rjmp	.+20     	; 0x1b6 <nrf24_transferSync1+0x32>
    {
        datain[i] = spi_transfer(dataout[i]);
 1a2:	f6 01       	movw	r30, r12
 1a4:	81 91       	ld	r24, Z+
 1a6:	6f 01       	movw	r12, r30
 1a8:	49 83       	std	Y+1, r20	; 0x01
 1aa:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
 1ae:	f8 01       	movw	r30, r16
 1b0:	81 93       	st	Z+, r24
 1b2:	8f 01       	movw	r16, r30
 1b4:	49 81       	ldd	r20, Y+1	; 0x01
}
void nrf24_transferSync1(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
 1b6:	8c 2d       	mov	r24, r12
 1b8:	8f 19       	sub	r24, r15
 1ba:	84 17       	cp	r24, r20
 1bc:	90 f3       	brcs	.-28     	; 0x1a2 <nrf24_transferSync1+0x1e>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	08 95       	ret

000001d0 <nrf24_transferSync>:
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(char* dataout,char* datain,uint8_t len)
{
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	1f 92       	push	r1
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	f8 2e       	mov	r15, r24
 1e6:	8b 01       	movw	r16, r22
    uint8_t i;

    for(i=0;i<len;i++)
 1e8:	c8 2e       	mov	r12, r24
 1ea:	d9 2e       	mov	r13, r25
 1ec:	0a c0       	rjmp	.+20     	; 0x202 <nrf24_transferSync+0x32>
    {
        datain[i] = spi_transfer(dataout[i]);
 1ee:	f6 01       	movw	r30, r12
 1f0:	81 91       	ld	r24, Z+
 1f2:	6f 01       	movw	r12, r30
 1f4:	49 83       	std	Y+1, r20	; 0x01
 1f6:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
 1fa:	f8 01       	movw	r30, r16
 1fc:	81 93       	st	Z+, r24
 1fe:	8f 01       	movw	r16, r30
 200:	49 81       	ldd	r20, Y+1	; 0x01
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(char* dataout,char* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
 202:	8c 2d       	mov	r24, r12
 204:	8f 19       	sub	r24, r15
 206:	84 17       	cp	r24, r20
 208:	90 f3       	brcs	.-28     	; 0x1ee <nrf24_transferSync+0x1e>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
 20a:	0f 90       	pop	r0
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	df 90       	pop	r13
 218:	cf 90       	pop	r12
 21a:	08 95       	ret

0000021c <nrf24_transmitSync1>:
void nrf24_transmitSync1(uint8_t* dataout,uint8_t len)
{
 21c:	ef 92       	push	r14
 21e:	ff 92       	push	r15
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	1f 92       	push	r1
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	18 2f       	mov	r17, r24
    uint8_t i;

    for(i=0;i<len;i++)
 22e:	e8 2e       	mov	r14, r24
 230:	f9 2e       	mov	r15, r25
 232:	07 c0       	rjmp	.+14     	; 0x242 <nrf24_transmitSync1+0x26>
    {
        spi_transfer(dataout[i]);
 234:	f7 01       	movw	r30, r14
 236:	81 91       	ld	r24, Z+
 238:	7f 01       	movw	r14, r30
 23a:	69 83       	std	Y+1, r22	; 0x01
 23c:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
 240:	69 81       	ldd	r22, Y+1	; 0x01
}
void nrf24_transmitSync1(uint8_t* dataout,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
 242:	8e 2d       	mov	r24, r14
 244:	81 1b       	sub	r24, r17
 246:	86 17       	cp	r24, r22
 248:	a8 f3       	brcs	.-22     	; 0x234 <nrf24_transmitSync1+0x18>
    {
        spi_transfer(dataout[i]);
    }

}
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	08 95       	ret

00000258 <nrf24_transmitSync>:
/* send multiple bytes over SPI */
void nrf24_transmitSync(char* dataout,uint8_t len)
{
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	1f 92       	push	r1
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	18 2f       	mov	r17, r24
    uint8_t i;

    for(i=0;i<len;i++)
 26a:	e8 2e       	mov	r14, r24
 26c:	f9 2e       	mov	r15, r25
 26e:	07 c0       	rjmp	.+14     	; 0x27e <nrf24_transmitSync+0x26>
    {
        spi_transfer(dataout[i]);
 270:	f7 01       	movw	r30, r14
 272:	81 91       	ld	r24, Z+
 274:	7f 01       	movw	r14, r30
 276:	69 83       	std	Y+1, r22	; 0x01
 278:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
 27c:	69 81       	ldd	r22, Y+1	; 0x01
/* send multiple bytes over SPI */
void nrf24_transmitSync(char* dataout,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
 27e:	8e 2d       	mov	r24, r14
 280:	81 1b       	sub	r24, r17
 282:	86 17       	cp	r24, r22
 284:	a8 f3       	brcs	.-22     	; 0x270 <nrf24_transmitSync+0x18>
    {
        spi_transfer(dataout[i]);
    }

}
 286:	0f 90       	pop	r0
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	ff 90       	pop	r15
 290:	ef 90       	pop	r14
 292:	08 95       	ret

00000294 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	1f 92       	push	r1
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	18 2f       	mov	r17, r24
    nrf24_csn_digitalWrite(LOW);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	69 83       	std	Y+1, r22	; 0x01
 2a6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 2aa:	81 2f       	mov	r24, r17
 2ac:	8f 71       	andi	r24, 0x1F	; 31
 2ae:	80 62       	ori	r24, 0x20	; 32
 2b0:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    spi_transfer(value);
 2b4:	69 81       	ldd	r22, Y+1	; 0x01
 2b6:	86 2f       	mov	r24, r22
 2b8:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
}
 2be:	0f 90       	pop	r0
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    spi_transfer(value);
    nrf24_csn_digitalWrite(HIGH);
 2c6:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

000002ca <nrf24_powerDown>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
}

void nrf24_powerDown()
{
    nrf24_ce_digitalWrite(LOW);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 2d0:	68 e0       	ldi	r22, 0x08	; 8
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0c 94 4a 01 	jmp	0x294	; 0x294 <nrf24_configRegister>

000002d8 <nrf24_powerUpTx>:
    nrf24_ce_digitalWrite(HIGH);
}

void nrf24_powerUpTx()
{
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
 2d8:	60 e7       	ldi	r22, 0x70	; 112
 2da:	87 e0       	ldi	r24, 0x07	; 7
 2dc:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 2e0:	6a e0       	ldi	r22, 0x0A	; 10
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0c 94 4a 01 	jmp	0x294	; 0x294 <nrf24_configRegister>

000002e8 <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(char* value)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrf24_ce_digitalWrite>

    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
 2f4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);
 2fe:	81 ee       	ldi	r24, 0xE1	; 225
 300:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>
    #endif

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
 310:	80 ea       	ldi	r24, 0xA0	; 160
 312:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);
 316:	60 91 37 01 	lds	r22, 0x0137
 31a:	ce 01       	movw	r24, r28
 31c:	0e 94 2c 01 	call	0x258	; 0x258 <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);
 326:	81 e0       	ldi	r24, 0x01	; 1
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);
 32c:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <nrf24_ce_digitalWrite>

00000330 <nrf24_powerUpRx>:
    }
}

void nrf24_powerUpRx()
{
    nrf24_csn_digitalWrite(LOW);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
 336:	82 ee       	ldi	r24, 0xE2	; 226
 338:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
 342:	60 e7       	ldi	r22, 0x70	; 112
 344:	87 e0       	ldi	r24, 0x07	; 7
 346:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));
 350:	6b e0       	ldi	r22, 0x0B	; 11
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <nrf24_ce_digitalWrite>

0000035e <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(char* data)
{
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
 36a:	81 e6       	ldi	r24, 0x61	; 97
 36c:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>

    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
 370:	40 91 37 01 	lds	r20, 0x0137
 374:	be 01       	movw	r22, r28
 376:	ce 01       	movw	r24, r28
 378:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <nrf24_transferSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));
 382:	60 e4       	ldi	r22, 0x40	; 64
 384:	87 e0       	ldi	r24, 0x07	; 7
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));
 38a:	0c 94 4a 01 	jmp	0x294	; 0x294 <nrf24_configRegister>

0000038e <nrf24_config>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
    /* Use static payload length ... */
    payload_len = pay_length;
 38e:	60 93 37 01 	sts	0x0137, r22

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
 392:	68 2f       	mov	r22, r24
 394:	85 e0       	ldi	r24, 0x05	; 5
 396:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    // Set length of incoming payload
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	81 e1       	ldi	r24, 0x11	; 17
 39e:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 3a2:	60 91 37 01 	lds	r22, 0x0137
 3a6:	82 e1       	ldi	r24, 0x12	; 18
 3a8:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	83 e1       	ldi	r24, 0x13	; 19
 3b0:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	84 e1       	ldi	r24, 0x14	; 20
 3b8:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	85 e1       	ldi	r24, 0x15	; 21
 3c0:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	86 e1       	ldi	r24, 0x16	; 22
 3c8:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 3cc:	66 e0       	ldi	r22, 0x06	; 6
 3ce:	86 e0       	ldi	r24, 0x06	; 6
 3d0:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
 3d4:	68 e0       	ldi	r22, 0x08	; 8
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 3ec:	6f e4       	ldi	r22, 0x4F	; 79
 3ee:	84 e0       	ldi	r24, 0x04	; 4
 3f0:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	8c e1       	ldi	r24, 0x1C	; 28
 3f8:	0e 94 4a 01 	call	0x294	; 0x294 <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
 3fc:	0c 94 98 01 	jmp	0x330	; 0x330 <nrf24_powerUpRx>

00000400 <nrf24_readRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	1f 92       	push	r1
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	18 2f       	mov	r17, r24
 412:	7b 01       	movw	r14, r22
    nrf24_csn_digitalWrite(LOW);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	49 83       	std	Y+1, r20	; 0x01
 418:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 41c:	81 2f       	mov	r24, r17
 41e:	8f 71       	andi	r24, 0x1F	; 31
 420:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    nrf24_transferSync1(value,value,len);
 424:	49 81       	ldd	r20, Y+1	; 0x01
 426:	b7 01       	movw	r22, r14
 428:	c7 01       	movw	r24, r14
 42a:	0e 94 c2 00 	call	0x184	; 0x184 <nrf24_transferSync1>
    nrf24_csn_digitalWrite(HIGH);
 42e:	81 e0       	ldi	r24, 0x01	; 1
}
 430:	0f 90       	pop	r0
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    nrf24_transferSync1(value,value,len);
    nrf24_csn_digitalWrite(HIGH);
 43c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

00000440 <nrf24_retransmissionCount>:
    nrf24_configRegister(STATUS,(1<<RX_DR));
}

/* Returns the number of retransmissions occured for the last message */
uint8_t nrf24_retransmissionCount()
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	1f 92       	push	r1
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	88 e0       	ldi	r24, 0x08	; 8
 454:	0e 94 00 02 	call	0x400	; 0x400 <nrf24_readRegister>
    rv = rv & 0x0F;
 458:	89 81       	ldd	r24, Y+1	; 0x01
    return rv;
}
 45a:	8f 70       	andi	r24, 0x0F	; 15
 45c:	0f 90       	pop	r0
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <nrf24_rxFifoEmpty>:
    return !nrf24_rxFifoEmpty();;
}

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	be 01       	movw	r22, r28
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	87 e1       	ldi	r24, 0x17	; 23
 478:	0e 94 00 02 	call	0x400	; 0x400 <nrf24_readRegister>

    return (fifoStatus & (1 << RX_EMPTY));
 47c:	89 81       	ldd	r24, Y+1	; 0x01
}
 47e:	81 70       	andi	r24, 0x01	; 1
 480:	0f 90       	pop	r0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <nrf24_dataReady>:
/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady()
{
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
 488:	0e 94 8f 00 	call	0x11e	; 0x11e <nrf24_getStatus>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) )
 48c:	86 fd       	sbrc	r24, 6
 48e:	07 c0       	rjmp	.+14     	; 0x49e <nrf24_dataReady+0x16>
    {
        return 1;
    }

    return !nrf24_rxFifoEmpty();;
 490:	0e 94 32 02 	call	0x464	; 0x464 <nrf24_rxFifoEmpty>
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	88 23       	and	r24, r24
 498:	19 f0       	breq	.+6      	; 0x4a0 <nrf24_dataReady+0x18>
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <nrf24_dataReady+0x18>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) )
    {
        return 1;
 49e:	91 e0       	ldi	r25, 0x01	; 1
    }

    return !nrf24_rxFifoEmpty();;
}
 4a0:	89 2f       	mov	r24, r25
 4a2:	08 95       	ret

000004a4 <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	1f 92       	push	r1
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
 4b4:	18 2f       	mov	r17, r24
 4b6:	7b 01       	movw	r14, r22
    nrf24_csn_digitalWrite(LOW);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	49 83       	std	Y+1, r20	; 0x01
 4bc:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 4c0:	81 2f       	mov	r24, r17
 4c2:	8f 71       	andi	r24, 0x1F	; 31
 4c4:	80 62       	ori	r24, 0x20	; 32
 4c6:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    nrf24_transmitSync1(value,len);
 4ca:	49 81       	ldd	r20, Y+1	; 0x01
 4cc:	64 2f       	mov	r22, r20
 4ce:	c7 01       	movw	r24, r14
 4d0:	0e 94 0e 01 	call	0x21c	; 0x21c <nrf24_transmitSync1>
    nrf24_csn_digitalWrite(HIGH);
 4d4:	81 e0       	ldi	r24, 0x01	; 1
}
 4d6:	0f 90       	pop	r0
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    nrf24_transmitSync1(value,len);
    nrf24_csn_digitalWrite(HIGH);
 4e2:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <nrf24_csn_digitalWrite>

000004e6 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 4ec:	45 e0       	ldi	r20, 0x05	; 5
 4ee:	bc 01       	movw	r22, r24
 4f0:	8a e0       	ldi	r24, 0x0A	; 10
 4f2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 4f6:	45 e0       	ldi	r20, 0x05	; 5
 4f8:	be 01       	movw	r22, r28
 4fa:	80 e1       	ldi	r24, 0x10	; 16
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 500:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <nrf24_writeRegister>

00000504 <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr)
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 510:	45 e0       	ldi	r20, 0x05	; 5
 512:	be 01       	movw	r22, r28
 514:	8b e0       	ldi	r24, 0x0B	; 11
 516:	0e 94 52 02 	call	0x4a4	; 0x4a4 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 51a:	81 e0       	ldi	r24, 0x01	; 1
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
/* Set the RX address */
void nrf24_rx_address(uint8_t * adr)
{
    nrf24_ce_digitalWrite(LOW);
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    nrf24_ce_digitalWrite(HIGH);
 520:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <nrf24_ce_digitalWrite>

00000524 <inic_nrf>:
    nrf24_transmitSync1(value,len);
    nrf24_csn_digitalWrite(HIGH);
}

void inic_nrf()
{
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	2a 97       	sbiw	r28, 0x0a	; 10
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
    uint8_t tx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
 538:	85 e0       	ldi	r24, 0x05	; 5
 53a:	ea e0       	ldi	r30, 0x0A	; 10
 53c:	f1 e0       	ldi	r31, 0x01	; 1
 53e:	de 01       	movw	r26, r28
 540:	16 96       	adiw	r26, 0x06	; 6
 542:	01 90       	ld	r0, Z+
 544:	0d 92       	st	X+, r0
 546:	8a 95       	dec	r24
 548:	e1 f7       	brne	.-8      	; 0x542 <inic_nrf+0x1e>
    uint8_t rx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	ef e0       	ldi	r30, 0x0F	; 15
 54e:	f1 e0       	ldi	r31, 0x01	; 1
 550:	de 01       	movw	r26, r28
 552:	11 96       	adiw	r26, 0x01	; 1
 554:	01 90       	ld	r0, Z+
 556:	0d 92       	st	X+, r0
 558:	8a 95       	dec	r24
 55a:	e1 f7       	brne	.-8      	; 0x554 <inic_nrf+0x30>
    /* init hardwarepins */
    nrf24_init();
 55c:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24_init>

    /* Channel #2 , payload length: 4 */
    nrf24_config(2,4);
 560:	64 e0       	ldi	r22, 0x04	; 4
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_config>

    /* Set the device addresses */
    nrf24_tx_address(tx_address);
 568:	ce 01       	movw	r24, r28
 56a:	06 96       	adiw	r24, 0x06	; 6
 56c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <nrf24_tx_address>
    nrf24_rx_address(rx_address);
 570:	ce 01       	movw	r24, r28
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	0e 94 82 02 	call	0x504	; 0x504 <nrf24_rx_address>
}
 578:	2a 96       	adiw	r28, 0x0a	; 10
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	f8 94       	cli
 57e:	de bf       	out	0x3e, r29	; 62
 580:	0f be       	out	0x3f, r0	; 63
 582:	cd bf       	out	0x3d, r28	; 61
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <enviar_nrf>:

char enviar_nrf(char buffer[])
{
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	00 d0       	rcall	.+0      	; 0x598 <enviar_nrf+0xe>
 598:	00 d0       	rcall	.+0      	; 0x59a <enviar_nrf+0x10>
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
 59e:	8c 01       	movw	r16, r24
    char tamanho=0,i=0,temp;
    char data_array[4];

    tamanho=strlen(buffer);
 5a0:	dc 01       	movw	r26, r24
 5a2:	0d 90       	ld	r0, X+
 5a4:	00 20       	and	r0, r0
 5a6:	e9 f7       	brne	.-6      	; 0x5a2 <enviar_nrf+0x18>
 5a8:	11 97       	sbiw	r26, 0x01	; 1
 5aa:	ea 2e       	mov	r14, r26
 5ac:	e8 1a       	sub	r14, r24
    nrf24_rx_address(rx_address);
}

char enviar_nrf(char buffer[])
{
    char tamanho=0,i=0,temp;
 5ae:	f1 2c       	mov	r15, r1
    char data_array[4];

    tamanho=strlen(buffer);

        /* Fill the data buffer */
        while(i<=tamanho)
 5b0:	1b c0       	rjmp	.+54     	; 0x5e8 <enviar_nrf+0x5e>
        {
            data_array[0] =buffer[i];
 5b2:	f8 01       	movw	r30, r16
 5b4:	ef 0d       	add	r30, r15
 5b6:	f1 1d       	adc	r31, r1
 5b8:	f7 fc       	sbrc	r15, 7
 5ba:	fa 95       	dec	r31
 5bc:	80 81       	ld	r24, Z
 5be:	89 83       	std	Y+1, r24	; 0x01
            data_array[1] =buffer[i+1];
 5c0:	81 81       	ldd	r24, Z+1	; 0x01
 5c2:	8a 83       	std	Y+2, r24	; 0x02
            data_array[2] =buffer[i+2];
 5c4:	82 81       	ldd	r24, Z+2	; 0x02
 5c6:	8b 83       	std	Y+3, r24	; 0x03
            data_array[3] =buffer[i+3];
 5c8:	83 81       	ldd	r24, Z+3	; 0x03
 5ca:	8c 83       	std	Y+4, r24	; 0x04
    /* Set the device addresses */
    nrf24_tx_address(tx_address);
    nrf24_rx_address(rx_address);
}

char enviar_nrf(char buffer[])
 5cc:	84 e0       	ldi	r24, 0x04	; 4
 5ce:	f8 0e       	add	r15, r24
            data_array[1] =buffer[i+1];
            data_array[2] =buffer[i+2];
            data_array[3] =buffer[i+3];
            i=i+4;
            /* Automatically goes to TX mode */
            nrf24_send(data_array);
 5d0:	ce 01       	movw	r24, r28
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <nrf24_send>

            /* Wait for transmission to end */
            while(nrf24_isSending());
 5d8:	0e 94 a9 00 	call	0x152	; 0x152 <nrf24_isSending>
 5dc:	81 11       	cpse	r24, r1
 5de:	fc cf       	rjmp	.-8      	; 0x5d8 <enviar_nrf+0x4e>

            /* Make analysis on last tranmission attempt */
            temp = nrf24_lastMessageStatus();
 5e0:	0e 94 9d 00 	call	0x13a	; 0x13a <nrf24_lastMessageStatus>

            if(temp == NRF24_MESSAGE_LOST)
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	31 f0       	breq	.+12     	; 0x5f4 <enviar_nrf+0x6a>
    char data_array[4];

    tamanho=strlen(buffer);

        /* Fill the data buffer */
        while(i<=tamanho)
 5e8:	ef 14       	cp	r14, r15
 5ea:	1c f7       	brge	.-58     	; 0x5b2 <enviar_nrf+0x28>
        }
        /* Retranmission count indicates the tranmission quality */


        /* Optionally, go back to RX mode ... */
        nrf24_powerUpRx();
 5ec:	0e 94 98 01 	call	0x330	; 0x330 <nrf24_powerUpRx>
        return '0';
 5f0:	80 e3       	ldi	r24, 0x30	; 48
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <enviar_nrf+0x6c>
            /* Make analysis on last tranmission attempt */
            temp = nrf24_lastMessageStatus();

            if(temp == NRF24_MESSAGE_LOST)
            {
                return '1';
 5f4:	81 e3       	ldi	r24, 0x31	; 49


        /* Optionally, go back to RX mode ... */
        nrf24_powerUpRx();
        return '0';
}
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	0f 90       	pop	r0
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	08 95       	ret

0000060c <uart_init>:


void uart_init()
{

    UBRR0H = (unsigned char)(USART_UBBR_VALUE>>8);
 60c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (unsigned char) (USART_UBBR_VALUE);
 610:	89 e1       	ldi	r24, 0x19	; 25
 612:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C= 0b00000110;
 616:	86 e0       	ldi	r24, 0x06	; 6
 618:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B= 0b00011000;
 61c:	e1 ec       	ldi	r30, 0xC1	; 193
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	88 e1       	ldi	r24, 0x18	; 24
 622:	80 83       	st	Z, r24
    UCSR0B|=0x80;
 624:	80 81       	ld	r24, Z
 626:	80 68       	ori	r24, 0x80	; 128
 628:	80 83       	st	Z, r24
    SREG |= 0x80;
 62a:	8f b7       	in	r24, 0x3f	; 63
 62c:	80 68       	ori	r24, 0x80	; 128
 62e:	8f bf       	out	0x3f, r24	; 63
 630:	08 95       	ret

00000632 <enviar>:
}

void enviar(char *Tx)
{
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	9c 01       	movw	r18, r24
    int i=0;

    //strcat(Tx,"<");
    while(i<=strlen(Tx))
 638:	ec 01       	movw	r28, r24
 63a:	07 c0       	rjmp	.+14     	; 0x64a <enviar+0x18>
    {
        while(!(UCSR0A & (1<<UDRE0)));
 63c:	40 91 c0 00 	lds	r20, 0x00C0
 640:	45 ff       	sbrs	r20, 5
 642:	fc cf       	rjmp	.-8      	; 0x63c <enviar+0xa>
        UDR0=Tx[i];
 644:	49 91       	ld	r20, Y+
 646:	40 93 c6 00 	sts	0x00C6, r20
void enviar(char *Tx)
{
    int i=0;

    //strcat(Tx,"<");
    while(i<=strlen(Tx))
 64a:	fc 01       	movw	r30, r24
 64c:	01 90       	ld	r0, Z+
 64e:	00 20       	and	r0, r0
 650:	e9 f7       	brne	.-6      	; 0x64c <enviar+0x1a>
 652:	31 97       	sbiw	r30, 0x01	; 1
 654:	e8 1b       	sub	r30, r24
 656:	f9 0b       	sbc	r31, r25
    UCSR0B= 0b00011000;
    UCSR0B|=0x80;
    SREG |= 0x80;
}

void enviar(char *Tx)
 658:	ae 01       	movw	r20, r28
 65a:	42 1b       	sub	r20, r18
 65c:	53 0b       	sbc	r21, r19
{
    int i=0;

    //strcat(Tx,"<");
    while(i<=strlen(Tx))
 65e:	e4 17       	cp	r30, r20
 660:	f5 07       	cpc	r31, r21
 662:	60 f7       	brcc	.-40     	; 0x63c <enviar+0xa>
    {
        while(!(UCSR0A & (1<<UDRE0)));
        UDR0=Tx[i];
        i++;
    }
}
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <__vector_18>:

ISR (USART_RX_vect)
{
 66a:	1f 92       	push	r1
 66c:	0f 92       	push	r0
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	0f 92       	push	r0
 672:	11 24       	eor	r1, r1
 674:	8f 93       	push	r24
    rx=UDR0;
 676:	80 91 c6 00 	lds	r24, 0x00C6
 67a:	80 93 3a 01 	sts	0x013A, r24
    flag_rx=1;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	80 93 38 01 	sts	0x0138, r24
}
 684:	8f 91       	pop	r24
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <processar_RX>:

void processar_RX()
{
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
 698:	c8 5c       	subi	r28, 0xC8	; 200
 69a:	d1 09       	sbc	r29, r1
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	f8 94       	cli
 6a0:	de bf       	out	0x3e, r29	; 62
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	cd bf       	out	0x3d, r28	; 61
    char buffer_Tx[200];

    if(rx=='1')
 6a6:	80 91 3a 01 	lds	r24, 0x013A
 6aa:	81 33       	cpi	r24, 0x31	; 49
 6ac:	61 f4       	brne	.+24     	; 0x6c6 <processar_RX+0x36>
    {
        PORTB|=(1<<PB0);
 6ae:	28 9a       	sbi	0x05, 0	; 5
        sprintf(buffer_Tx,"a");
 6b0:	64 e1       	ldi	r22, 0x14	; 20
 6b2:	71 e0       	ldi	r23, 0x01	; 1
 6b4:	ce 01       	movw	r24, r28
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	0e 94 94 06 	call	0xd28	; 0xd28 <strcpy>
        enviar(buffer_Tx);
 6bc:	ce 01       	movw	r24, r28
 6be:	01 96       	adiw	r24, 0x01	; 1
 6c0:	0e 94 19 03 	call	0x632	; 0x632 <enviar>
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <processar_RX+0x38>
    }
    else
        PORTB&=~(1<<PB0);
 6c6:	28 98       	cbi	0x05, 0	; 5
    flag_rx=0;
 6c8:	10 92 38 01 	sts	0x0138, r1
}
 6cc:	c8 53       	subi	r28, 0x38	; 56
 6ce:	df 4f       	sbci	r29, 0xFF	; 255
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	f8 94       	cli
 6d4:	de bf       	out	0x3e, r29	; 62
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	cd bf       	out	0x3d, r28	; 61
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
    set_bit(DDRB,1); // CE output
 6e0:	21 9a       	sbi	0x04, 1	; 4
    set_bit(DDRB,2); // CSN output
 6e2:	22 9a       	sbi	0x04, 2	; 4
    set_bit(DDRB,5); // SCK output
 6e4:	25 9a       	sbi	0x04, 5	; 4
    set_bit(DDRB,3); // MOSI output
 6e6:	23 9a       	sbi	0x04, 3	; 4
    clr_bit(DDRB,4); // MISO input
 6e8:	24 98       	cbi	0x04, 4	; 4
 6ea:	08 95       	ret

000006ec <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
 6ec:	88 23       	and	r24, r24
 6ee:	11 f0       	breq	.+4      	; 0x6f4 <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(PORTB,1);
 6f0:	29 9a       	sbi	0x05, 1	; 5
 6f2:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,1);
 6f4:	29 98       	cbi	0x05, 1	; 5
 6f6:	08 95       	ret

000006f8 <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
 6f8:	88 23       	and	r24, r24
 6fa:	11 f0       	breq	.+4      	; 0x700 <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(PORTB,2);
 6fc:	2a 9a       	sbi	0x05, 2	; 5
 6fe:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,2);
 700:	2a 98       	cbi	0x05, 2	; 5
 702:	08 95       	ret

00000704 <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
 704:	88 23       	and	r24, r24
 706:	11 f0       	breq	.+4      	; 0x70c <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(PORTB,5);
 708:	2d 9a       	sbi	0x05, 5	; 5
 70a:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,5);
 70c:	2d 98       	cbi	0x05, 5	; 5
 70e:	08 95       	ret

00000710 <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
 710:	88 23       	and	r24, r24
 712:	11 f0       	breq	.+4      	; 0x718 <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(PORTB,3);
 714:	2b 9a       	sbi	0x05, 3	; 5
 716:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,3);
 718:	2b 98       	cbi	0x05, 3	; 5
 71a:	08 95       	ret

0000071c <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(PINB,4);
 71c:	83 b1       	in	r24, 0x03	; 3
}
 71e:	80 71       	andi	r24, 0x10	; 16
 720:	08 95       	ret

00000722 <xputc>:

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 722:	e0 91 35 01 	lds	r30, 0x0135
 726:	f0 91 36 01 	lds	r31, 0x0136
 72a:	30 97       	sbiw	r30, 0x00	; 0
 72c:	31 f0       	breq	.+12     	; 0x73a <xputc+0x18>
		*outptr++ = (unsigned char)c;
 72e:	81 93       	st	Z+, r24
 730:	f0 93 36 01 	sts	0x0136, r31
 734:	e0 93 35 01 	sts	0x0135, r30
		return;
 738:	08 95       	ret
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 73a:	e0 91 cb 02 	lds	r30, 0x02CB
 73e:	f0 91 cc 02 	lds	r31, 0x02CC
 742:	30 97       	sbiw	r30, 0x00	; 0
 744:	09 f0       	breq	.+2      	; 0x748 <xputc+0x26>
 746:	09 94       	ijmp
 748:	08 95       	ret

0000074a <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	ec 01       	movw	r28, r24
	while (*str)
 750:	02 c0       	rjmp	.+4      	; 0x756 <xputs+0xc>
		xputc(*str++);
 752:	0e 94 91 03 	call	0x722	; 0x722 <xputc>

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
	while (*str)
 756:	89 91       	ld	r24, Y+
 758:	81 11       	cpse	r24, r1
 75a:	fb cf       	rjmp	.-10     	; 0x752 <xputs+0x8>
		xputc(*str++);
}
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	08 95       	ret

00000762 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 762:	2f 92       	push	r2
 764:	3f 92       	push	r3
 766:	4f 92       	push	r4
 768:	5f 92       	push	r5
 76a:	6f 92       	push	r6
 76c:	7f 92       	push	r7
 76e:	8f 92       	push	r8
 770:	9f 92       	push	r9
 772:	af 92       	push	r10
 774:	bf 92       	push	r11
 776:	cf 92       	push	r12
 778:	df 92       	push	r13
 77a:	ef 92       	push	r14
 77c:	ff 92       	push	r15
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
 78a:	65 97       	sbiw	r28, 0x15	; 21
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	8c 01       	movw	r16, r24
 798:	3b 01       	movw	r6, r22
		do {
			d = (char)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s));
		if (f & 8) s[i++] = '-';
 79a:	3d e2       	ldi	r19, 0x2D	; 45
 79c:	23 2e       	mov	r2, r19
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 79e:	d8 01       	movw	r26, r16
 7a0:	8c 91       	ld	r24, X
		if (!c) break;				/* End of format? */
 7a2:	88 23       	and	r24, r24
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <xvprintf+0x46>
 7a6:	5a c1       	rjmp	.+692    	; 0xa5c <__stack+0x15d>
		if (c != '%') {				/* Pass through it if not a % sequense */
 7a8:	85 32       	cpi	r24, 0x25	; 37
 7aa:	19 f0       	breq	.+6      	; 0x7b2 <xvprintf+0x50>
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 7ac:	0f 5f       	subi	r16, 0xFF	; 255
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	a5 c0       	rjmp	.+330    	; 0x8fc <xvprintf+0x19a>
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
 7b2:	f8 01       	movw	r30, r16
 7b4:	31 80       	ldd	r3, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padded */
 7b6:	f0 e3       	ldi	r31, 0x30	; 48
 7b8:	3f 12       	cpse	r3, r31
 7ba:	09 c0       	rjmp	.+18     	; 0x7ce <xvprintf+0x6c>
			f = 1; c = *fmt++;
 7bc:	d8 01       	movw	r26, r16
 7be:	12 96       	adiw	r26, 0x02	; 2
 7c0:	3c 90       	ld	r3, X
 7c2:	0d 5f       	subi	r16, 0xFD	; 253
 7c4:	1f 4f       	sbci	r17, 0xFF	; 255
 7c6:	ee 24       	eor	r14, r14
 7c8:	e3 94       	inc	r14
 7ca:	f1 2c       	mov	r15, r1
 7cc:	0f c0       	rjmp	.+30     	; 0x7ec <xvprintf+0x8a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 7ce:	bd e2       	ldi	r27, 0x2D	; 45
 7d0:	3b 16       	cp	r3, r27
 7d2:	29 f0       	breq	.+10     	; 0x7de <xvprintf+0x7c>
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
 7d4:	0e 5f       	subi	r16, 0xFE	; 254
 7d6:	1f 4f       	sbci	r17, 0xFF	; 255
		c = *fmt++;					/* Get a char */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
 7d8:	e1 2c       	mov	r14, r1
 7da:	f1 2c       	mov	r15, r1
 7dc:	07 c0       	rjmp	.+14     	; 0x7ec <xvprintf+0x8a>
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: '0' padded */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 7de:	f8 01       	movw	r30, r16
 7e0:	32 80       	ldd	r3, Z+2	; 0x02
 7e2:	0d 5f       	subi	r16, 0xFD	; 253
 7e4:	1f 4f       	sbci	r17, 0xFF	; 255
 7e6:	92 e0       	ldi	r25, 0x02	; 2
 7e8:	e9 2e       	mov	r14, r25
 7ea:	f1 2c       	mov	r15, r1
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 7ec:	c1 2c       	mov	r12, r1
 7ee:	d1 2c       	mov	r13, r1
 7f0:	11 c0       	rjmp	.+34     	; 0x814 <xvprintf+0xb2>
			w = w * 10 + c - '0';
 7f2:	8a e0       	ldi	r24, 0x0A	; 10
 7f4:	96 01       	movw	r18, r12
 7f6:	82 9f       	mul	r24, r18
 7f8:	60 01       	movw	r12, r0
 7fa:	83 9f       	mul	r24, r19
 7fc:	d0 0c       	add	r13, r0
 7fe:	11 24       	eor	r1, r1
 800:	c3 0c       	add	r12, r3
 802:	d1 1c       	adc	r13, r1
 804:	37 fc       	sbrc	r3, 7
 806:	da 94       	dec	r13
 808:	90 e3       	ldi	r25, 0x30	; 48
 80a:	c9 1a       	sub	r12, r25
 80c:	d1 08       	sbc	r13, r1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80e:	d8 01       	movw	r26, r16
 810:	3d 90       	ld	r3, X+
 812:	8d 01       	movw	r16, r26
 814:	83 2d       	mov	r24, r3
 816:	80 53       	subi	r24, 0x30	; 48
 818:	8a 30       	cpi	r24, 0x0A	; 10
 81a:	58 f3       	brcs	.-42     	; 0x7f2 <xvprintf+0x90>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 81c:	bc e6       	ldi	r27, 0x6C	; 108
 81e:	3b 16       	cp	r3, r27
 820:	19 f0       	breq	.+6      	; 0x828 <xvprintf+0xc6>
 822:	ec e4       	ldi	r30, 0x4C	; 76
 824:	3e 12       	cpse	r3, r30
 826:	05 c0       	rjmp	.+10     	; 0x832 <xvprintf+0xd0>
			f |= 4; c = *fmt++;
 828:	68 94       	set
 82a:	e2 f8       	bld	r14, 2
 82c:	d8 01       	movw	r26, r16
 82e:	3d 90       	ld	r3, X+
 830:	8d 01       	movw	r16, r26
		}
		if (!c) break;				/* End of format? */
 832:	33 20       	and	r3, r3
 834:	09 f4       	brne	.+2      	; 0x838 <xvprintf+0xd6>
 836:	12 c1       	rjmp	.+548    	; 0xa5c <__stack+0x15d>
		d = c;
		if (d >= 'a') d -= 0x20;
 838:	b0 e6       	ldi	r27, 0x60	; 96
 83a:	23 2d       	mov	r18, r3
 83c:	b3 15       	cp	r27, r3
 83e:	0c f4       	brge	.+2      	; 0x842 <xvprintf+0xe0>
 840:	20 52       	subi	r18, 0x20	; 32
		switch (d) {				/* Type is... */
 842:	2f 34       	cpi	r18, 0x4F	; 79
 844:	09 f4       	brne	.+2      	; 0x848 <xvprintf+0xe6>
 846:	60 c0       	rjmp	.+192    	; 0x908 <__stack+0x9>
 848:	4c f4       	brge	.+18     	; 0x85c <xvprintf+0xfa>
 84a:	23 34       	cpi	r18, 0x43	; 67
 84c:	09 f4       	brne	.+2      	; 0x850 <xvprintf+0xee>
 84e:	48 c0       	rjmp	.+144    	; 0x8e0 <xvprintf+0x17e>
 850:	24 34       	cpi	r18, 0x44	; 68
 852:	69 f0       	breq	.+26     	; 0x86e <xvprintf+0x10c>
 854:	22 34       	cpi	r18, 0x42	; 66
 856:	09 f0       	breq	.+2      	; 0x85a <xvprintf+0xf8>
 858:	50 c0       	rjmp	.+160    	; 0x8fa <xvprintf+0x198>
 85a:	53 c0       	rjmp	.+166    	; 0x902 <__stack+0x3>
 85c:	25 35       	cpi	r18, 0x55	; 85
 85e:	39 f0       	breq	.+14     	; 0x86e <xvprintf+0x10c>
 860:	28 35       	cpi	r18, 0x58	; 88
 862:	09 f4       	brne	.+2      	; 0x866 <xvprintf+0x104>
 864:	47 c0       	rjmp	.+142    	; 0x8f4 <xvprintf+0x192>
 866:	23 35       	cpi	r18, 0x53	; 83
 868:	09 f0       	breq	.+2      	; 0x86c <xvprintf+0x10a>
 86a:	47 c0       	rjmp	.+142    	; 0x8fa <xvprintf+0x198>
 86c:	03 c0       	rjmp	.+6      	; 0x874 <xvprintf+0x112>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 86e:	4a e0       	ldi	r20, 0x0A	; 10
 870:	50 e0       	ldi	r21, 0x00	; 0
 872:	4c c0       	rjmp	.+152    	; 0x90c <__stack+0xd>
		if (!c) break;				/* End of format? */
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 874:	53 01       	movw	r10, r6
 876:	e2 e0       	ldi	r30, 0x02	; 2
 878:	ae 0e       	add	r10, r30
 87a:	b1 1c       	adc	r11, r1
 87c:	d3 01       	movw	r26, r6
 87e:	5c 90       	ld	r5, X
 880:	11 96       	adiw	r26, 0x01	; 1
 882:	9c 91       	ld	r25, X
 884:	25 2d       	mov	r18, r5
 886:	39 2f       	mov	r19, r25
			for (j = 0; p[j]; j++) ;
 888:	f9 01       	movw	r30, r18
    xprintf("%c", 'a');				"a"
    xprintf("%f", 10.0);            <xprintf lacks floating point support>
*/

static
void xvprintf (
 88a:	4f 01       	movw	r8, r30
 88c:	82 1a       	sub	r8, r18
 88e:	93 0a       	sbc	r9, r19
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++) ;
 890:	81 91       	ld	r24, Z+
 892:	81 11       	cpse	r24, r1
 894:	fa cf       	rjmp	.-12     	; 0x88a <xvprintf+0x128>
 896:	07 c0       	rjmp	.+14     	; 0x8a6 <xvprintf+0x144>
			while (!(f & 2) && j++ < w) xputc(' ');
 898:	80 e2       	ldi	r24, 0x20	; 32
 89a:	9d 8b       	std	Y+21, r25	; 0x15
 89c:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
 8a0:	43 01       	movw	r8, r6
 8a2:	9d 89       	ldd	r25, Y+21	; 0x15
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <xvprintf+0x14a>
 8a6:	b2 e0       	ldi	r27, 0x02	; 2
 8a8:	eb 22       	and	r14, r27
 8aa:	ff 24       	eor	r15, r15
 8ac:	e1 14       	cp	r14, r1
 8ae:	f1 04       	cpc	r15, r1
 8b0:	41 f4       	brne	.+16     	; 0x8c2 <xvprintf+0x160>
 8b2:	34 01       	movw	r6, r8
 8b4:	ef ef       	ldi	r30, 0xFF	; 255
 8b6:	6e 1a       	sub	r6, r30
 8b8:	7e 0a       	sbc	r7, r30
 8ba:	8c 14       	cp	r8, r12
 8bc:	9d 04       	cpc	r9, r13
 8be:	60 f3       	brcs	.-40     	; 0x898 <xvprintf+0x136>
 8c0:	43 01       	movw	r8, r6
			xputs(p);
 8c2:	85 2d       	mov	r24, r5
 8c4:	0e 94 a5 03 	call	0x74a	; 0x74a <xputs>
			while (j++ < w) xputc(' ');
 8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <xvprintf+0x174>
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
 8d0:	ff ef       	ldi	r31, 0xFF	; 255
 8d2:	8f 1a       	sub	r8, r31
 8d4:	9f 0a       	sbc	r9, r31
 8d6:	8c 14       	cp	r8, r12
 8d8:	9d 04       	cpc	r9, r13
 8da:	b8 f3       	brcs	.-18     	; 0x8ca <xvprintf+0x168>
		if (!c) break;				/* End of format? */
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8dc:	35 01       	movw	r6, r10
 8de:	5f cf       	rjmp	.-322    	; 0x79e <xvprintf+0x3c>
			while (!(f & 2) && j++ < w) xputc(' ');
			xputs(p);
			while (j++ < w) xputc(' ');
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8e0:	73 01       	movw	r14, r6
 8e2:	22 e0       	ldi	r18, 0x02	; 2
 8e4:	e2 0e       	add	r14, r18
 8e6:	f1 1c       	adc	r15, r1
 8e8:	d3 01       	movw	r26, r6
 8ea:	8c 91       	ld	r24, X
 8ec:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
 8f0:	37 01       	movw	r6, r14
 8f2:	55 cf       	rjmp	.-342    	; 0x79e <xvprintf+0x3c>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8f4:	40 e1       	ldi	r20, 0x10	; 16
 8f6:	50 e0       	ldi	r21, 0x00	; 0
 8f8:	09 c0       	rjmp	.+18     	; 0x90c <__stack+0xd>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8fa:	83 2d       	mov	r24, r3
 8fc:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
 900:	4e cf       	rjmp	.-356    	; 0x79e <xvprintf+0x3c>
			while (j++ < w) xputc(' ');
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
 902:	42 e0       	ldi	r20, 0x02	; 2
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xd>
		case 'O' :					/* Octal */
			r = 8; break;
 908:	48 e0       	ldi	r20, 0x08	; 8
 90a:	50 e0       	ldi	r21, 0x00	; 0
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 90c:	e2 fe       	sbrs	r14, 2
 90e:	0c c0       	rjmp	.+24     	; 0x928 <__stack+0x29>
 910:	43 01       	movw	r8, r6
 912:	b4 e0       	ldi	r27, 0x04	; 4
 914:	8b 0e       	add	r8, r27
 916:	91 1c       	adc	r9, r1
 918:	f3 01       	movw	r30, r6
 91a:	60 81       	ld	r22, Z
 91c:	71 81       	ldd	r23, Z+1	; 0x01
 91e:	82 81       	ldd	r24, Z+2	; 0x02
 920:	93 81       	ldd	r25, Z+3	; 0x03
		if (d == 'D' && (v & 0x80000000)) {
 922:	24 34       	cpi	r18, 0x44	; 68
 924:	f9 f4       	brne	.+62     	; 0x964 <__stack+0x65>
 926:	13 c0       	rjmp	.+38     	; 0x94e <__stack+0x4f>
 928:	c3 01       	movw	r24, r6
 92a:	02 96       	adiw	r24, 0x02	; 2
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 92c:	4c 01       	movw	r8, r24
 92e:	24 34       	cpi	r18, 0x44	; 68
 930:	41 f4       	brne	.+16     	; 0x942 <__stack+0x43>
 932:	d3 01       	movw	r26, r6
 934:	6d 91       	ld	r22, X+
 936:	7c 91       	ld	r23, X
 938:	88 27       	eor	r24, r24
 93a:	77 fd       	sbrc	r23, 7
 93c:	80 95       	com	r24
 93e:	98 2f       	mov	r25, r24
 940:	06 c0       	rjmp	.+12     	; 0x94e <__stack+0x4f>
 942:	f3 01       	movw	r30, r6
 944:	60 81       	ld	r22, Z
 946:	71 81       	ldd	r23, Z+1	; 0x01
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0b c0       	rjmp	.+22     	; 0x964 <__stack+0x65>
		if (d == 'D' && (v & 0x80000000)) {
 94e:	97 ff       	sbrs	r25, 7
 950:	09 c0       	rjmp	.+18     	; 0x964 <__stack+0x65>
			v = 0 - v;
 952:	90 95       	com	r25
 954:	80 95       	com	r24
 956:	70 95       	com	r23
 958:	61 95       	neg	r22
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
 960:	68 94       	set
 962:	e3 f8       	bld	r14, 3
 964:	9e 01       	movw	r18, r28
 966:	2f 5f       	subi	r18, 0xFF	; 255
 968:	3f 4f       	sbci	r19, 0xFF	; 255
 96a:	3c 8b       	std	Y+20, r19	; 0x14
 96c:	2b 8b       	std	Y+19, r18	; 0x13
		}
		i = 0;
 96e:	a1 2c       	mov	r10, r1
 970:	b1 2c       	mov	r11, r1
		do {
			d = (char)(v % r); v /= r;
 972:	2a 01       	movw	r4, r20
 974:	61 2c       	mov	r6, r1
 976:	71 2c       	mov	r7, r1
 978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x7f>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 97a:	a9 88       	ldd	r10, Y+17	; 0x11
 97c:	ba 88       	ldd	r11, Y+18	; 0x12
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (char)(v % r); v /= r;
 97e:	a3 01       	movw	r20, r6
 980:	92 01       	movw	r18, r4
 982:	0e 94 72 06 	call	0xce4	; 0xce4 <__udivmodsi4>
 986:	f6 2f       	mov	r31, r22
 988:	e6 2f       	mov	r30, r22
 98a:	ca 01       	movw	r24, r20
 98c:	b9 01       	movw	r22, r18
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 98e:	fa 30       	cpi	r31, 0x0A	; 10
 990:	3c f0       	brlt	.+14     	; 0x9a0 <__stack+0xa1>
 992:	a8 e7       	ldi	r26, 0x78	; 120
 994:	3a 12       	cpse	r3, r26
 996:	02 c0       	rjmp	.+4      	; 0x99c <__stack+0x9d>
 998:	f7 e2       	ldi	r31, 0x27	; 39
 99a:	01 c0       	rjmp	.+2      	; 0x99e <__stack+0x9f>
 99c:	f7 e0       	ldi	r31, 0x07	; 7
 99e:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
 9a0:	e0 5d       	subi	r30, 0xD0	; 208
 9a2:	ab 89       	ldd	r26, Y+19	; 0x13
 9a4:	bc 89       	ldd	r27, Y+20	; 0x14
 9a6:	ed 93       	st	X+, r30
 9a8:	bc 8b       	std	Y+20, r27	; 0x14
 9aa:	ab 8b       	std	Y+19, r26	; 0x13
 9ac:	f5 01       	movw	r30, r10
 9ae:	31 96       	adiw	r30, 0x01	; 1
 9b0:	fa 8b       	std	Y+18, r31	; 0x12
 9b2:	e9 8b       	std	Y+17, r30	; 0x11
		} while (v && i < sizeof(s));
 9b4:	23 2b       	or	r18, r19
 9b6:	24 2b       	or	r18, r20
 9b8:	25 2b       	or	r18, r21
 9ba:	29 f0       	breq	.+10     	; 0x9c6 <__stack+0xc7>
 9bc:	70 97       	sbiw	r30, 0x10	; 16
 9be:	e9 f6       	brne	.-70     	; 0x97a <__stack+0x7b>
 9c0:	8f e0       	ldi	r24, 0x0F	; 15
 9c2:	a8 2e       	mov	r10, r24
 9c4:	b1 2c       	mov	r11, r1
		if (f & 8) s[i++] = '-';
 9c6:	e3 fe       	sbrs	r14, 3
 9c8:	0e c0       	rjmp	.+28     	; 0x9e6 <__stack+0xe7>
 9ca:	e1 e0       	ldi	r30, 0x01	; 1
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	ec 0f       	add	r30, r28
 9d0:	fd 1f       	adc	r31, r29
 9d2:	29 89       	ldd	r18, Y+17	; 0x11
 9d4:	3a 89       	ldd	r19, Y+18	; 0x12
 9d6:	e2 0f       	add	r30, r18
 9d8:	f3 1f       	adc	r31, r19
 9da:	20 82       	st	Z, r2
 9dc:	95 01       	movw	r18, r10
 9de:	2e 5f       	subi	r18, 0xFE	; 254
 9e0:	3f 4f       	sbci	r19, 0xFF	; 255
 9e2:	3a 8b       	std	Y+18, r19	; 0x12
 9e4:	29 8b       	std	Y+17, r18	; 0x11
		j = i; d = (f & 1) ? '0' : ' ';
 9e6:	e0 fe       	sbrs	r14, 0
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <__stack+0xef>
 9ea:	90 e3       	ldi	r25, 0x30	; 48
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <__stack+0xf1>
 9ee:	90 e2       	ldi	r25, 0x20	; 32
 9f0:	a9 88       	ldd	r10, Y+17	; 0x11
 9f2:	ba 88       	ldd	r11, Y+18	; 0x12
		while (!(f & 2) && j++ < w) xputc(d);
 9f4:	32 e0       	ldi	r19, 0x02	; 2
 9f6:	e3 22       	and	r14, r19
 9f8:	ff 24       	eor	r15, r15
 9fa:	06 c0       	rjmp	.+12     	; 0xa08 <__stack+0x109>
 9fc:	89 2f       	mov	r24, r25
 9fe:	9d 8b       	std	Y+21, r25	; 0x15
 a00:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
 a04:	53 01       	movw	r10, r6
 a06:	9d 89       	ldd	r25, Y+21	; 0x15
 a08:	e1 14       	cp	r14, r1
 a0a:	f1 04       	cpc	r15, r1
 a0c:	41 f4       	brne	.+16     	; 0xa1e <__stack+0x11f>
 a0e:	35 01       	movw	r6, r10
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	68 1a       	sub	r6, r24
 a14:	78 0a       	sbc	r7, r24
 a16:	ac 14       	cp	r10, r12
 a18:	bd 04       	cpc	r11, r13
 a1a:	80 f3       	brcs	.-32     	; 0x9fc <__stack+0xfd>
 a1c:	53 01       	movw	r10, r6
		do xputc(s[--i]); while(i);
 a1e:	29 89       	ldd	r18, Y+17	; 0x11
 a20:	3a 89       	ldd	r19, Y+18	; 0x12
 a22:	21 50       	subi	r18, 0x01	; 1
 a24:	31 09       	sbc	r19, r1
 a26:	3a 8b       	std	Y+18, r19	; 0x12
 a28:	29 8b       	std	Y+17, r18	; 0x11
    xprintf("%c", 'a');				"a"
    xprintf("%f", 10.0);            <xprintf lacks floating point support>
*/

static
void xvprintf (
 a2a:	e1 e0       	ldi	r30, 0x01	; 1
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	ec 0f       	add	r30, r28
 a30:	fd 1f       	adc	r31, r29
 a32:	e2 0f       	add	r30, r18
 a34:	f3 1f       	adc	r31, r19
			s[i++] = d + '0';
		} while (v && i < sizeof(s));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) xputc(d);
		do xputc(s[--i]); while(i);
 a36:	80 81       	ld	r24, Z
 a38:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
 a3c:	29 89       	ldd	r18, Y+17	; 0x11
 a3e:	3a 89       	ldd	r19, Y+18	; 0x12
 a40:	23 2b       	or	r18, r19
 a42:	69 f7       	brne	.-38     	; 0xa1e <__stack+0x11f>
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <__stack+0x153>
		while (j++ < w) xputc(' ');
 a46:	80 e2       	ldi	r24, 0x20	; 32
 a48:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
 a4c:	3f ef       	ldi	r19, 0xFF	; 255
 a4e:	a3 1a       	sub	r10, r19
 a50:	b3 0a       	sbc	r11, r19
 a52:	ac 14       	cp	r10, r12
 a54:	bd 04       	cpc	r11, r13
 a56:	b8 f3       	brcs	.-18     	; 0xa46 <__stack+0x147>
 a58:	34 01       	movw	r6, r8
 a5a:	a1 ce       	rjmp	.-702    	; 0x79e <xvprintf+0x3c>
	}
}
 a5c:	65 96       	adiw	r28, 0x15	; 21
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	f8 94       	cli
 a62:	de bf       	out	0x3e, r29	; 62
 a64:	0f be       	out	0x3f, r0	; 63
 a66:	cd bf       	out	0x3d, r28	; 61
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	1f 91       	pop	r17
 a6e:	0f 91       	pop	r16
 a70:	ff 90       	pop	r15
 a72:	ef 90       	pop	r14
 a74:	df 90       	pop	r13
 a76:	cf 90       	pop	r12
 a78:	bf 90       	pop	r11
 a7a:	af 90       	pop	r10
 a7c:	9f 90       	pop	r9
 a7e:	8f 90       	pop	r8
 a80:	7f 90       	pop	r7
 a82:	6f 90       	pop	r6
 a84:	5f 90       	pop	r5
 a86:	4f 90       	pop	r4
 a88:	3f 90       	pop	r3
 a8a:	2f 90       	pop	r2
 a8c:	08 95       	ret

00000a8e <xfputs>:

void xfputs (					/* Put a string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	str				/* Pointer to the string */
)
{
 a8e:	0f 93       	push	r16
 a90:	1f 93       	push	r17
 a92:	cf 93       	push	r28
 a94:	df 93       	push	r29
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
 a96:	00 91 cb 02 	lds	r16, 0x02CB
 a9a:	10 91 cc 02 	lds	r17, 0x02CC
	xfunc_out = func;	/* Switch output to specified device */
 a9e:	90 93 cc 02 	sts	0x02CC, r25
 aa2:	80 93 cb 02 	sts	0x02CB, r24
 aa6:	eb 01       	movw	r28, r22
	while (*str)		/* Put the string */
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <xfputs+0x20>
		xputc(*str++);
 aaa:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
	xfunc_out = func;	/* Switch output to specified device */
	while (*str)		/* Put the string */
 aae:	89 91       	ld	r24, Y+
 ab0:	81 11       	cpse	r24, r1
 ab2:	fb cf       	rjmp	.-10     	; 0xaaa <xfputs+0x1c>
		xputc(*str++);
	xfunc_out = pf;		/* Restore output device */
 ab4:	10 93 cc 02 	sts	0x02CC, r17
 ab8:	00 93 cb 02 	sts	0x02CB, r16
}
 abc:	df 91       	pop	r29
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	08 95       	ret

00000ac6 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	cd b7       	in	r28, 0x3d	; 61
 acc:	de b7       	in	r29, 0x3e	; 62
 ace:	fe 01       	movw	r30, r28
 ad0:	35 96       	adiw	r30, 0x05	; 5
 ad2:	81 91       	ld	r24, Z+
 ad4:	91 91       	ld	r25, Z+
	va_list arp;


	va_start(arp, fmt);
	xvprintf(fmt, arp);
 ad6:	bf 01       	movw	r22, r30
 ad8:	0e 94 b1 03 	call	0x762	; 0x762 <xvprintf>
	va_end(arp);
}
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	08 95       	ret

00000ae2 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 ae2:	cf 93       	push	r28
 ae4:	df 93       	push	r29
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	outptr = buff;		/* Switch destination for memory */
 aea:	8d 81       	ldd	r24, Y+5	; 0x05
 aec:	9e 81       	ldd	r25, Y+6	; 0x06
 aee:	90 93 36 01 	sts	0x0136, r25
 af2:	80 93 35 01 	sts	0x0135, r24

	va_start(arp, fmt);
 af6:	ce 01       	movw	r24, r28
 af8:	09 96       	adiw	r24, 0x09	; 9
	xvprintf(fmt, arp);
 afa:	bc 01       	movw	r22, r24
 afc:	8f 81       	ldd	r24, Y+7	; 0x07
 afe:	98 85       	ldd	r25, Y+8	; 0x08
 b00:	0e 94 b1 03 	call	0x762	; 0x762 <xvprintf>
	va_end(arp);

	*outptr = 0;		/* Terminate output string with a \0 */
 b04:	e0 91 35 01 	lds	r30, 0x0135
 b08:	f0 91 36 01 	lds	r31, 0x0136
 b0c:	10 82       	st	Z, r1
	outptr = 0;			/* Switch destination for device */
 b0e:	10 92 36 01 	sts	0x0136, r1
 b12:	10 92 35 01 	sts	0x0135, r1
}
 b16:	df 91       	pop	r29
 b18:	cf 91       	pop	r28
 b1a:	08 95       	ret

00000b1c <xfprintf>:
void xfprintf (					/* Put a formatted string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	fmt,			/* Pointer to the format string */
	...							/* Optional arguments */
)
{
 b1c:	0f 93       	push	r16
 b1e:	1f 93       	push	r17
 b20:	cf 93       	push	r28
 b22:	df 93       	push	r29
 b24:	cd b7       	in	r28, 0x3d	; 61
 b26:	de b7       	in	r29, 0x3e	; 62
	va_list arp;
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
 b28:	00 91 cb 02 	lds	r16, 0x02CB
 b2c:	10 91 cc 02 	lds	r17, 0x02CC
	xfunc_out = func;	/* Switch output to specified device */
 b30:	8f 81       	ldd	r24, Y+7	; 0x07
 b32:	98 85       	ldd	r25, Y+8	; 0x08
 b34:	90 93 cc 02 	sts	0x02CC, r25
 b38:	80 93 cb 02 	sts	0x02CB, r24

	va_start(arp, fmt);
 b3c:	ce 01       	movw	r24, r28
 b3e:	0b 96       	adiw	r24, 0x0b	; 11
	xvprintf(fmt, arp);
 b40:	bc 01       	movw	r22, r24
 b42:	89 85       	ldd	r24, Y+9	; 0x09
 b44:	9a 85       	ldd	r25, Y+10	; 0x0a
 b46:	0e 94 b1 03 	call	0x762	; 0x762 <xvprintf>
	va_end(arp);

	xfunc_out = pf;		/* Restore output device */
 b4a:	10 93 cc 02 	sts	0x02CC, r17
 b4e:	00 93 cb 02 	sts	0x02CB, r16
}
 b52:	df 91       	pop	r29
 b54:	cf 91       	pop	r28
 b56:	1f 91       	pop	r17
 b58:	0f 91       	pop	r16
 b5a:	08 95       	ret

00000b5c <put_dump>:
 b5c:	af 92       	push	r10
 b5e:	bf 92       	push	r11
 b60:	cf 92       	push	r12
 b62:	df 92       	push	r13
 b64:	ef 92       	push	r14
 b66:	ff 92       	push	r15
 b68:	0f 93       	push	r16
 b6a:	1f 93       	push	r17
 b6c:	cf 93       	push	r28
 b6e:	df 93       	push	r29
 b70:	00 d0       	rcall	.+0      	; 0xb72 <put_dump+0x16>
 b72:	cd b7       	in	r28, 0x3d	; 61
 b74:	de b7       	in	r29, 0x3e	; 62
 b76:	59 01       	movw	r10, r18
 b78:	7f 93       	push	r23
 b7a:	6f 93       	push	r22
 b7c:	5f 93       	push	r21
 b7e:	4f 93       	push	r20
 b80:	2a e1       	ldi	r18, 0x1A	; 26
 b82:	31 e0       	ldi	r19, 0x01	; 1
 b84:	3f 93       	push	r19
 b86:	2f 93       	push	r18
 b88:	89 83       	std	Y+1, r24	; 0x01
 b8a:	9a 83       	std	Y+2, r25	; 0x02
 b8c:	0e 94 63 05 	call	0xac6	; 0xac6 <xprintf>
 b90:	0f 90       	pop	r0
 b92:	0f 90       	pop	r0
 b94:	0f 90       	pop	r0
 b96:	0f 90       	pop	r0
 b98:	0f 90       	pop	r0
 b9a:	0f 90       	pop	r0
 b9c:	89 81       	ldd	r24, Y+1	; 0x01
 b9e:	9a 81       	ldd	r25, Y+2	; 0x02
 ba0:	02 30       	cpi	r16, 0x02	; 2
 ba2:	11 05       	cpc	r17, r1
 ba4:	c1 f1       	breq	.+112    	; 0xc16 <put_dump+0xba>
 ba6:	04 30       	cpi	r16, 0x04	; 4
 ba8:	11 05       	cpc	r17, r1
 baa:	09 f4       	brne	.+2      	; 0xbae <put_dump+0x52>
 bac:	4d c0       	rjmp	.+154    	; 0xc48 <put_dump+0xec>
 bae:	01 30       	cpi	r16, 0x01	; 1
 bb0:	11 05       	cpc	r17, r1
 bb2:	09 f0       	breq	.+2      	; 0xbb6 <put_dump+0x5a>
 bb4:	67 c0       	rjmp	.+206    	; 0xc84 <put_dump+0x128>
 bb6:	8c 01       	movw	r16, r24
 bb8:	78 01       	movw	r14, r16
 bba:	61 e2       	ldi	r22, 0x21	; 33
 bbc:	c6 2e       	mov	r12, r22
 bbe:	61 e0       	ldi	r22, 0x01	; 1
 bc0:	d6 2e       	mov	r13, r22
 bc2:	0d c0       	rjmp	.+26     	; 0xbde <put_dump+0x82>
 bc4:	f7 01       	movw	r30, r14
 bc6:	81 91       	ld	r24, Z+
 bc8:	7f 01       	movw	r14, r30
 bca:	1f 92       	push	r1
 bcc:	8f 93       	push	r24
 bce:	df 92       	push	r13
 bd0:	cf 92       	push	r12
 bd2:	0e 94 63 05 	call	0xac6	; 0xac6 <xprintf>
 bd6:	0f 90       	pop	r0
 bd8:	0f 90       	pop	r0
 bda:	0f 90       	pop	r0
 bdc:	0f 90       	pop	r0
 bde:	c7 01       	movw	r24, r14
 be0:	80 1b       	sub	r24, r16
 be2:	91 0b       	sbc	r25, r17
 be4:	8a 15       	cp	r24, r10
 be6:	9b 05       	cpc	r25, r11
 be8:	6c f3       	brlt	.-38     	; 0xbc4 <put_dump+0x68>
 bea:	80 e2       	ldi	r24, 0x20	; 32
 bec:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
 bf0:	78 01       	movw	r14, r16
 bf2:	0a c0       	rjmp	.+20     	; 0xc08 <put_dump+0xac>
 bf4:	f7 01       	movw	r30, r14
 bf6:	81 91       	ld	r24, Z+
 bf8:	7f 01       	movw	r14, r30
 bfa:	98 2f       	mov	r25, r24
 bfc:	90 52       	subi	r25, 0x20	; 32
 bfe:	9f 35       	cpi	r25, 0x5F	; 95
 c00:	08 f0       	brcs	.+2      	; 0xc04 <put_dump+0xa8>
 c02:	8e e2       	ldi	r24, 0x2E	; 46
 c04:	0e 94 91 03 	call	0x722	; 0x722 <xputc>
 c08:	c7 01       	movw	r24, r14
 c0a:	80 1b       	sub	r24, r16
 c0c:	91 0b       	sbc	r25, r17
 c0e:	8a 15       	cp	r24, r10
 c10:	9b 05       	cpc	r25, r11
 c12:	84 f3       	brlt	.-32     	; 0xbf4 <put_dump+0x98>
 c14:	37 c0       	rjmp	.+110    	; 0xc84 <put_dump+0x128>
 c16:	8c 01       	movw	r16, r24
 c18:	57 e2       	ldi	r21, 0x27	; 39
 c1a:	e5 2e       	mov	r14, r21
 c1c:	51 e0       	ldi	r21, 0x01	; 1
 c1e:	f5 2e       	mov	r15, r21
 c20:	f8 01       	movw	r30, r16
 c22:	80 81       	ld	r24, Z
 c24:	91 81       	ldd	r25, Z+1	; 0x01
 c26:	0e 5f       	subi	r16, 0xFE	; 254
 c28:	1f 4f       	sbci	r17, 0xFF	; 255
 c2a:	9f 93       	push	r25
 c2c:	8f 93       	push	r24
 c2e:	ff 92       	push	r15
 c30:	ef 92       	push	r14
 c32:	0e 94 63 05 	call	0xac6	; 0xac6 <xprintf>
 c36:	f1 e0       	ldi	r31, 0x01	; 1
 c38:	af 1a       	sub	r10, r31
 c3a:	b1 08       	sbc	r11, r1
 c3c:	0f 90       	pop	r0
 c3e:	0f 90       	pop	r0
 c40:	0f 90       	pop	r0
 c42:	0f 90       	pop	r0
 c44:	69 f7       	brne	.-38     	; 0xc20 <put_dump+0xc4>
 c46:	1e c0       	rjmp	.+60     	; 0xc84 <put_dump+0x128>
 c48:	8c 01       	movw	r16, r24
 c4a:	4d e2       	ldi	r20, 0x2D	; 45
 c4c:	e4 2e       	mov	r14, r20
 c4e:	41 e0       	ldi	r20, 0x01	; 1
 c50:	f4 2e       	mov	r15, r20
 c52:	f8 01       	movw	r30, r16
 c54:	80 81       	ld	r24, Z
 c56:	91 81       	ldd	r25, Z+1	; 0x01
 c58:	22 81       	ldd	r18, Z+2	; 0x02
 c5a:	33 81       	ldd	r19, Z+3	; 0x03
 c5c:	0c 5f       	subi	r16, 0xFC	; 252
 c5e:	1f 4f       	sbci	r17, 0xFF	; 255
 c60:	3f 93       	push	r19
 c62:	2f 93       	push	r18
 c64:	9f 93       	push	r25
 c66:	8f 93       	push	r24
 c68:	ff 92       	push	r15
 c6a:	ef 92       	push	r14
 c6c:	0e 94 63 05 	call	0xac6	; 0xac6 <xprintf>
 c70:	f1 e0       	ldi	r31, 0x01	; 1
 c72:	af 1a       	sub	r10, r31
 c74:	b1 08       	sbc	r11, r1
 c76:	0f 90       	pop	r0
 c78:	0f 90       	pop	r0
 c7a:	0f 90       	pop	r0
 c7c:	0f 90       	pop	r0
 c7e:	0f 90       	pop	r0
 c80:	0f 90       	pop	r0
 c82:	39 f7       	brne	.-50     	; 0xc52 <put_dump+0xf6>
 c84:	8a e0       	ldi	r24, 0x0A	; 10
 c86:	0f 90       	pop	r0
 c88:	0f 90       	pop	r0
 c8a:	df 91       	pop	r29
 c8c:	cf 91       	pop	r28
 c8e:	1f 91       	pop	r17
 c90:	0f 91       	pop	r16
 c92:	ff 90       	pop	r15
 c94:	ef 90       	pop	r14
 c96:	df 90       	pop	r13
 c98:	cf 90       	pop	r12
 c9a:	bf 90       	pop	r11
 c9c:	af 90       	pop	r10
 c9e:	0c 94 91 03 	jmp	0x722	; 0x722 <xputc>

00000ca2 <main>:
 ca2:	0e 94 06 03 	call	0x60c	; 0x60c <uart_init>
 ca6:	0e 94 92 02 	call	0x524	; 0x524 <inic_nrf>
 caa:	64 e0       	ldi	r22, 0x04	; 4
 cac:	82 e0       	ldi	r24, 0x02	; 2
 cae:	0e 94 c7 01 	call	0x38e	; 0x38e <nrf24_config>
 cb2:	85 e0       	ldi	r24, 0x05	; 5
 cb4:	91 e0       	ldi	r25, 0x01	; 1
 cb6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <nrf24_tx_address>
 cba:	80 e0       	ldi	r24, 0x00	; 0
 cbc:	91 e0       	ldi	r25, 0x01	; 1
 cbe:	0e 94 82 02 	call	0x504	; 0x504 <nrf24_rx_address>
 cc2:	66 e1       	ldi	r22, 0x16	; 22
 cc4:	71 e0       	ldi	r23, 0x01	; 1
 cc6:	83 e0       	ldi	r24, 0x03	; 3
 cc8:	92 e0       	ldi	r25, 0x02	; 2
 cca:	0e 94 94 06 	call	0xd28	; 0xd28 <strcpy>
 cce:	83 e0       	ldi	r24, 0x03	; 3
 cd0:	92 e0       	ldi	r25, 0x02	; 2
 cd2:	0e 94 c5 02 	call	0x58a	; 0x58a <enviar_nrf>
 cd6:	83 ec       	ldi	r24, 0xC3	; 195
 cd8:	99 e0       	ldi	r25, 0x09	; 9
 cda:	01 97       	sbiw	r24, 0x01	; 1
 cdc:	f1 f7       	brne	.-4      	; 0xcda <main+0x38>
 cde:	00 c0       	rjmp	.+0      	; 0xce0 <main+0x3e>
 ce0:	00 00       	nop
 ce2:	f5 cf       	rjmp	.-22     	; 0xcce <main+0x2c>

00000ce4 <__udivmodsi4>:
 ce4:	a1 e2       	ldi	r26, 0x21	; 33
 ce6:	1a 2e       	mov	r1, r26
 ce8:	aa 1b       	sub	r26, r26
 cea:	bb 1b       	sub	r27, r27
 cec:	fd 01       	movw	r30, r26
 cee:	0d c0       	rjmp	.+26     	; 0xd0a <__udivmodsi4_ep>

00000cf0 <__udivmodsi4_loop>:
 cf0:	aa 1f       	adc	r26, r26
 cf2:	bb 1f       	adc	r27, r27
 cf4:	ee 1f       	adc	r30, r30
 cf6:	ff 1f       	adc	r31, r31
 cf8:	a2 17       	cp	r26, r18
 cfa:	b3 07       	cpc	r27, r19
 cfc:	e4 07       	cpc	r30, r20
 cfe:	f5 07       	cpc	r31, r21
 d00:	20 f0       	brcs	.+8      	; 0xd0a <__udivmodsi4_ep>
 d02:	a2 1b       	sub	r26, r18
 d04:	b3 0b       	sbc	r27, r19
 d06:	e4 0b       	sbc	r30, r20
 d08:	f5 0b       	sbc	r31, r21

00000d0a <__udivmodsi4_ep>:
 d0a:	66 1f       	adc	r22, r22
 d0c:	77 1f       	adc	r23, r23
 d0e:	88 1f       	adc	r24, r24
 d10:	99 1f       	adc	r25, r25
 d12:	1a 94       	dec	r1
 d14:	69 f7       	brne	.-38     	; 0xcf0 <__udivmodsi4_loop>
 d16:	60 95       	com	r22
 d18:	70 95       	com	r23
 d1a:	80 95       	com	r24
 d1c:	90 95       	com	r25
 d1e:	9b 01       	movw	r18, r22
 d20:	ac 01       	movw	r20, r24
 d22:	bd 01       	movw	r22, r26
 d24:	cf 01       	movw	r24, r30
 d26:	08 95       	ret

00000d28 <strcpy>:
 d28:	fb 01       	movw	r30, r22
 d2a:	dc 01       	movw	r26, r24
 d2c:	01 90       	ld	r0, Z+
 d2e:	0d 92       	st	X+, r0
 d30:	00 20       	and	r0, r0
 d32:	e1 f7       	brne	.-8      	; 0xd2c <strcpy+0x4>
 d34:	08 95       	ret

00000d36 <_exit>:
 d36:	f8 94       	cli

00000d38 <__stop_program>:
 d38:	ff cf       	rjmp	.-2      	; 0xd38 <__stop_program>
