
bin/Debug/TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000011f6  0000128a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d5  00800188  00800188  00001312  2**0
                  ALLOC
  3 .stab         000048d8  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000361b  00000000  00000000  00005bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00009207  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ef       	ldi	r30, 0xF6	; 246
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 38       	cpi	r26, 0x88	; 136
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a8 e8       	ldi	r26, 0x88	; 136
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 35       	cpi	r26, 0x5D	; 93
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 99 05 	call	0xb32	; 0xb32 <main>
      9e:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <nrf24_init>:
uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
    nrf24_setupPins();
      a6:	0e 94 b8 02 	call	0x570	; 0x570 <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	0e 94 be 02 	call	0x57c	; 0x57c <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	0c 94 c4 02 	jmp	0x588	; 0x588 <nrf24_csn_digitalWrite>

000000b6 <nrf24_payload_length>:

/* Returns the payload length */
uint8_t nrf24_payload_length()
{
    return payload_len;
}
      b6:	80 91 8b 01 	lds	r24, 0x018B
      ba:	08 95       	ret

000000bc <spi_transfer>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
      c6:	08 2f       	mov	r16, r24
    uint8_t i = 0;
    uint8_t rx = 0;    

    nrf24_sck_digitalWrite(LOW);
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	0e 94 ca 02 	call	0x594	; 0x594 <nrf24_sck_digitalWrite>
      ce:	c7 e0       	ldi	r28, 0x07	; 7
      d0:	d0 e0       	ldi	r29, 0x00	; 0

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
    uint8_t i = 0;
    uint8_t rx = 0;    
      d2:	f1 2c       	mov	r15, r1
    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
    {

        if(tx & (1<<(7-i)))
      d4:	10 e0       	ldi	r17, 0x00	; 0
      d6:	98 01       	movw	r18, r16
      d8:	0c 2e       	mov	r0, r28
      da:	02 c0       	rjmp	.+4      	; 0xe0 <spi_transfer+0x24>
      dc:	35 95       	asr	r19
      de:	27 95       	ror	r18
      e0:	0a 94       	dec	r0
      e2:	e2 f7       	brpl	.-8      	; 0xdc <spi_transfer+0x20>
      e4:	20 ff       	sbrs	r18, 0
      e6:	02 c0       	rjmp	.+4      	; 0xec <spi_transfer+0x30>
        {
            nrf24_mosi_digitalWrite(HIGH);            
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	01 c0       	rjmp	.+2      	; 0xee <spi_transfer+0x32>
        }
        else
        {
            nrf24_mosi_digitalWrite(LOW);
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <nrf24_mosi_digitalWrite>
        }

        nrf24_sck_digitalWrite(HIGH);        
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	0e 94 ca 02 	call	0x594	; 0x594 <nrf24_sck_digitalWrite>

        rx = rx << 1;
      f8:	ff 0c       	add	r15, r15
        if(nrf24_miso_digitalRead())
      fa:	0e 94 d6 02 	call	0x5ac	; 0x5ac <nrf24_miso_digitalRead>
      fe:	88 23       	and	r24, r24
     100:	11 f0       	breq	.+4      	; 0x106 <spi_transfer+0x4a>
        {
            rx |= 0x01;
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	f8 2a       	or	r15, r24
        }

        nrf24_sck_digitalWrite(LOW);                
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	0e 94 ca 02 	call	0x594	; 0x594 <nrf24_sck_digitalWrite>
     10c:	21 97       	sbiw	r28, 0x01	; 1
     10e:	18 f7       	brcc	.-58     	; 0xd6 <spi_transfer+0x1a>

    }

    return rx;
}
     110:	8f 2d       	mov	r24, r15
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	1f 91       	pop	r17
     118:	0f 91       	pop	r16
     11a:	ff 90       	pop	r15
     11c:	08 95       	ret

0000011e <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
     11e:	cf 93       	push	r28
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
     12c:	c8 2f       	mov	r28, r24
    nrf24_csn_digitalWrite(HIGH);
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>
    return rv;
}
     134:	8c 2f       	mov	r24, r28
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
    uint8_t rv;

    rv = nrf24_getStatus();
     13a:	0e 94 8f 00 	call	0x11e	; 0x11e <nrf24_getStatus>

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
     13e:	85 fd       	sbrc	r24, 5
     140:	04 c0       	rjmp	.+8      	; 0x14a <nrf24_lastMessageStatus+0x10>
    {
        return NRF24_TRANSMISSON_OK;
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
     142:	84 ff       	sbrs	r24, 4
     144:	04 c0       	rjmp	.+8      	; 0x14e <nrf24_lastMessageStatus+0x14>
    {
        return NRF24_MESSAGE_LOST;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	08 95       	ret
    rv = nrf24_getStatus();

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
    {
        return NRF24_TRANSMISSON_OK;
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	08 95       	ret
        return NRF24_MESSAGE_LOST;
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
     14e:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
     150:	08 95       	ret

00000152 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
     152:	0e 94 8f 00 	call	0x11e	; 0x11e <nrf24_getStatus>
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
     156:	98 2f       	mov	r25, r24
     158:	90 73       	andi	r25, 0x30	; 48
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	09 f0       	breq	.+2      	; 0x160 <nrf24_isSending+0xe>
     15e:	80 e0       	ldi	r24, 0x00	; 0
        return 0; /* false */
    }

    return 1; /* true */

}
     160:	08 95       	ret

00000162 <nrf24_payloadLength>:
    return (fifoStatus & (1 << RX_EMPTY));
}

/* Returns the length of data waiting in the RX fifo */
uint8_t nrf24_payloadLength()
{
     162:	cf 93       	push	r28
    uint8_t status;
    nrf24_csn_digitalWrite(LOW);
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>
    spi_transfer(R_RX_PL_WID);
     16a:	80 e6       	ldi	r24, 0x60	; 96
     16c:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    status = spi_transfer(0x00);
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
     176:	c8 2f       	mov	r28, r24
    nrf24_csn_digitalWrite(HIGH);
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>
    return status;
}
     17e:	8c 2f       	mov	r24, r28
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <nrf24_transferSync>:
    return rx;
}

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
     184:	cf 92       	push	r12
     186:	df 92       	push	r13
     188:	ff 92       	push	r15
     18a:	0f 93       	push	r16
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	1f 92       	push	r1
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
     198:	f8 2e       	mov	r15, r24
     19a:	8b 01       	movw	r16, r22
    uint8_t i;

    for(i=0;i<len;i++)
     19c:	c8 2e       	mov	r12, r24
     19e:	d9 2e       	mov	r13, r25
     1a0:	0a c0       	rjmp	.+20     	; 0x1b6 <nrf24_transferSync+0x32>
    {
        datain[i] = spi_transfer(dataout[i]);
     1a2:	f6 01       	movw	r30, r12
     1a4:	81 91       	ld	r24, Z+
     1a6:	6f 01       	movw	r12, r30
     1a8:	49 83       	std	Y+1, r20	; 0x01
     1aa:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
     1ae:	f8 01       	movw	r30, r16
     1b0:	81 93       	st	Z+, r24
     1b2:	8f 01       	movw	r16, r30
     1b4:	49 81       	ldd	r20, Y+1	; 0x01
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
     1b6:	8c 2d       	mov	r24, r12
     1b8:	8f 19       	sub	r24, r15
     1ba:	84 17       	cp	r24, r20
     1bc:	90 f3       	brcs	.-28     	; 0x1a2 <nrf24_transferSync+0x1e>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
     1be:	0f 90       	pop	r0
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	ff 90       	pop	r15
     1ca:	df 90       	pop	r13
     1cc:	cf 90       	pop	r12
     1ce:	08 95       	ret

000001d0 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	1f 92       	push	r1
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	18 2f       	mov	r17, r24
    uint8_t i;
    
    for(i=0;i<len;i++)
     1e2:	e8 2e       	mov	r14, r24
     1e4:	f9 2e       	mov	r15, r25
     1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <nrf24_transmitSync+0x26>
    {
        spi_transfer(dataout[i]);
     1e8:	f7 01       	movw	r30, r14
     1ea:	81 91       	ld	r24, Z+
     1ec:	7f 01       	movw	r14, r30
     1ee:	69 83       	std	Y+1, r22	; 0x01
     1f0:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
     1f4:	69 81       	ldd	r22, Y+1	; 0x01
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
     1f6:	8e 2d       	mov	r24, r14
     1f8:	81 1b       	sub	r24, r17
     1fa:	86 17       	cp	r24, r22
     1fc:	a8 f3       	brcs	.-22     	; 0x1e8 <nrf24_transmitSync+0x18>
    {
        spi_transfer(dataout[i]);
    }

}
     1fe:	0f 90       	pop	r0
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	1f 91       	pop	r17
     206:	ff 90       	pop	r15
     208:	ef 90       	pop	r14
     20a:	08 95       	ret

0000020c <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	1f 92       	push	r1
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	18 2f       	mov	r17, r24
    nrf24_csn_digitalWrite(LOW);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	69 83       	std	Y+1, r22	; 0x01
     21e:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     222:	81 2f       	mov	r24, r17
     224:	8f 71       	andi	r24, 0x1F	; 31
     226:	80 62       	ori	r24, 0x20	; 32
     228:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    spi_transfer(value);
     22c:	69 81       	ldd	r22, Y+1	; 0x01
     22e:	86 2f       	mov	r24, r22
     230:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
     234:	81 e0       	ldi	r24, 0x01	; 1
}
     236:	0f 90       	pop	r0
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    spi_transfer(value);
    nrf24_csn_digitalWrite(HIGH);
     23e:	0c 94 c4 02 	jmp	0x588	; 0x588 <nrf24_csn_digitalWrite>

00000242 <nrf24_powerDown>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
}

void nrf24_powerDown()
{
    nrf24_ce_digitalWrite(LOW);
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	0e 94 be 02 	call	0x57c	; 0x57c <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
     248:	68 e0       	ldi	r22, 0x08	; 8
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	0c 94 06 01 	jmp	0x20c	; 0x20c <nrf24_configRegister>

00000250 <nrf24_powerUpTx>:
    nrf24_ce_digitalWrite(HIGH);
}

void nrf24_powerUpTx()
{
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     250:	60 e7       	ldi	r22, 0x70	; 112
     252:	87 e0       	ldi	r24, 0x07	; 7
     254:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
     258:	6a e0       	ldi	r22, 0x0A	; 10
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0c 94 06 01 	jmp	0x20c	; 0x20c <nrf24_configRegister>

00000260 <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	ec 01       	movw	r28, r24
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 be 02 	call	0x57c	; 0x57c <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
     26c:	0e 94 28 01 	call	0x250	; 0x250 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
     276:	81 ee       	ldi	r24, 0xE1	; 225
     278:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
     288:	80 ea       	ldi	r24, 0xA0	; 160
     28a:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
     28e:	60 91 8b 01 	lds	r22, 0x018B
     292:	ce 01       	movw	r24, r28
     294:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
     29e:	81 e0       	ldi	r24, 0x01	; 1
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
     2a4:	0c 94 be 02 	jmp	0x57c	; 0x57c <nrf24_ce_digitalWrite>

000002a8 <nrf24_powerUpRx>:
    }
}

void nrf24_powerUpRx()
{     
    nrf24_csn_digitalWrite(LOW);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
     2ae:	82 ee       	ldi	r24, 0xE2	; 226
     2b0:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     2ba:	60 e7       	ldi	r22, 0x70	; 112
     2bc:	87 e0       	ldi	r24, 0x07	; 7
     2be:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	0e 94 be 02 	call	0x57c	; 0x57c <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
     2c8:	6b e0       	ldi	r22, 0x0B	; 11
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0c 94 be 02 	jmp	0x57c	; 0x57c <nrf24_ce_digitalWrite>

000002d6 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	ec 01       	movw	r28, r24
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
     2e2:	81 e6       	ldi	r24, 0x61	; 97
     2e4:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
     2e8:	40 91 8b 01 	lds	r20, 0x018B
     2ec:	be 01       	movw	r22, r28
     2ee:	ce 01       	movw	r24, r28
     2f0:	0e 94 c2 00 	call	0x184	; 0x184 <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
     2fa:	60 e4       	ldi	r22, 0x40	; 64
     2fc:	87 e0       	ldi	r24, 0x07	; 7
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
     302:	0c 94 06 01 	jmp	0x20c	; 0x20c <nrf24_configRegister>

00000306 <nrf24_config>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
    /* Use static payload length ... */
    payload_len = pay_length;
     306:	60 93 8b 01 	sts	0x018B, r22

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
     30a:	68 2f       	mov	r22, r24
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	81 e1       	ldi	r24, 0x11	; 17
     316:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
     31a:	60 91 8b 01 	lds	r22, 0x018B
     31e:	82 e1       	ldi	r24, 0x12	; 18
     320:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	83 e1       	ldi	r24, 0x13	; 19
     328:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	84 e1       	ldi	r24, 0x14	; 20
     330:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	85 e1       	ldi	r24, 0x15	; 21
     338:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	86 e1       	ldi	r24, 0x16	; 22
     340:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
     344:	66 e0       	ldi	r22, 0x06	; 6
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
     34c:	68 e0       	ldi	r22, 0x08	; 8
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    // Auto Acknowledgment
    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
     354:	63 e0       	ldi	r22, 0x03	; 3
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
     35c:	63 e0       	ldi	r22, 0x03	; 3
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
     364:	6f e4       	ldi	r22, 0x4F	; 79
     366:	84 e0       	ldi	r24, 0x04	; 4
     368:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	8c e1       	ldi	r24, 0x1C	; 28
     370:	0e 94 06 01 	call	0x20c	; 0x20c <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
     374:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <nrf24_powerUpRx>

00000378 <nrf24_readRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	1f 92       	push	r1
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	18 2f       	mov	r17, r24
     38a:	7b 01       	movw	r14, r22
    nrf24_csn_digitalWrite(LOW);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	49 83       	std	Y+1, r20	; 0x01
     390:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
     394:	81 2f       	mov	r24, r17
     396:	8f 71       	andi	r24, 0x1F	; 31
     398:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    nrf24_transferSync(value,value,len);
     39c:	49 81       	ldd	r20, Y+1	; 0x01
     39e:	b7 01       	movw	r22, r14
     3a0:	c7 01       	movw	r24, r14
     3a2:	0e 94 c2 00 	call	0x184	; 0x184 <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
}
     3a8:	0f 90       	pop	r0
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    nrf24_transferSync(value,value,len);
    nrf24_csn_digitalWrite(HIGH);
     3b4:	0c 94 c4 02 	jmp	0x588	; 0x588 <nrf24_csn_digitalWrite>

000003b8 <nrf24_retransmissionCount>:
    nrf24_configRegister(STATUS,(1<<RX_DR));   
}

/* Returns the number of retransmissions occured for the last message */
uint8_t nrf24_retransmissionCount()
{
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	1f 92       	push	r1
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	be 01       	movw	r22, r28
     3c6:	6f 5f       	subi	r22, 0xFF	; 255
     3c8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	0e 94 bc 01 	call	0x378	; 0x378 <nrf24_readRegister>
    rv = rv & 0x0F;
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
    return rv;
}
     3d2:	8f 70       	andi	r24, 0x0F	; 15
     3d4:	0f 90       	pop	r0
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <nrf24_rxFifoEmpty>:
    return !nrf24_rxFifoEmpty();;
}

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	1f 92       	push	r1
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	be 01       	movw	r22, r28
     3ea:	6f 5f       	subi	r22, 0xFF	; 255
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	87 e1       	ldi	r24, 0x17	; 23
     3f0:	0e 94 bc 01 	call	0x378	; 0x378 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3f6:	81 70       	andi	r24, 0x01	; 1
     3f8:	0f 90       	pop	r0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <nrf24_dataReady>:
/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
     400:	0e 94 8f 00 	call	0x11e	; 0x11e <nrf24_getStatus>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
     404:	86 fd       	sbrc	r24, 6
     406:	07 c0       	rjmp	.+14     	; 0x416 <nrf24_dataReady+0x16>
    {
        return 1;
    }

    return !nrf24_rxFifoEmpty();;
     408:	0e 94 ee 01 	call	0x3dc	; 0x3dc <nrf24_rxFifoEmpty>
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	88 23       	and	r24, r24
     410:	19 f0       	breq	.+6      	; 0x418 <nrf24_dataReady+0x18>
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	01 c0       	rjmp	.+2      	; 0x418 <nrf24_dataReady+0x18>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
    {
        return 1;
     416:	91 e0       	ldi	r25, 0x01	; 1
    }

    return !nrf24_rxFifoEmpty();;
}
     418:	89 2f       	mov	r24, r25
     41a:	08 95       	ret

0000041c <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	1f 92       	push	r1
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	18 2f       	mov	r17, r24
     42e:	7b 01       	movw	r14, r22
    nrf24_csn_digitalWrite(LOW);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	49 83       	std	Y+1, r20	; 0x01
     434:	0e 94 c4 02 	call	0x588	; 0x588 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     438:	81 2f       	mov	r24, r17
     43a:	8f 71       	andi	r24, 0x1F	; 31
     43c:	80 62       	ori	r24, 0x20	; 32
     43e:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
    nrf24_transmitSync(value,len);
     442:	49 81       	ldd	r20, Y+1	; 0x01
     444:	64 2f       	mov	r22, r20
     446:	c7 01       	movw	r24, r14
     448:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
     44c:	81 e0       	ldi	r24, 0x01	; 1
}
     44e:	0f 90       	pop	r0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    nrf24_transmitSync(value,len);
    nrf24_csn_digitalWrite(HIGH);
     45a:	0c 94 c4 02 	jmp	0x588	; 0x588 <nrf24_csn_digitalWrite>

0000045e <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
     464:	45 e0       	ldi	r20, 0x05	; 5
     466:	bc 01       	movw	r22, r24
     468:	8a e0       	ldi	r24, 0x0A	; 10
     46a:	0e 94 0e 02 	call	0x41c	; 0x41c <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
     46e:	45 e0       	ldi	r20, 0x05	; 5
     470:	be 01       	movw	r22, r28
     472:	80 e1       	ldi	r24, 0x10	; 16
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
     478:	0c 94 0e 02 	jmp	0x41c	; 0x41c <nrf24_writeRegister>

0000047c <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 be 02 	call	0x57c	; 0x57c <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
     488:	45 e0       	ldi	r20, 0x05	; 5
     48a:	be 01       	movw	r22, r28
     48c:	8b e0       	ldi	r24, 0x0B	; 11
     48e:	0e 94 0e 02 	call	0x41c	; 0x41c <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
     492:	81 e0       	ldi	r24, 0x01	; 1
}
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
    nrf24_ce_digitalWrite(LOW);
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    nrf24_ce_digitalWrite(HIGH);
     498:	0c 94 be 02 	jmp	0x57c	; 0x57c <nrf24_ce_digitalWrite>

0000049c <uart_init>:
char buffer[200];

void uart_init()
{

    UBRR0H = (unsigned char)(USART_UBBR_VALUE>>8);
     49c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (unsigned char) (USART_UBBR_VALUE);
     4a0:	89 e1       	ldi	r24, 0x19	; 25
     4a2:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C= 0b00000110;
     4a6:	86 e0       	ldi	r24, 0x06	; 6
     4a8:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B= 0b00011000;
     4ac:	e1 ec       	ldi	r30, 0xC1	; 193
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	88 e1       	ldi	r24, 0x18	; 24
     4b2:	80 83       	st	Z, r24
    UCSR0B|=0x80;
     4b4:	80 81       	ld	r24, Z
     4b6:	80 68       	ori	r24, 0x80	; 128
     4b8:	80 83       	st	Z, r24
    SREG |= 0x80;
     4ba:	8f b7       	in	r24, 0x3f	; 63
     4bc:	80 68       	ori	r24, 0x80	; 128
     4be:	8f bf       	out	0x3f, r24	; 63
     4c0:	08 95       	ret

000004c2 <enviar>:
}

void enviar(char *Tx)
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	9c 01       	movw	r18, r24
    int i=0;

    //strcat(Tx,"<");
    while(i<=strlen(Tx))
     4c8:	ec 01       	movw	r28, r24
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <enviar+0x18>
    {
        while(!(UCSR0A & (1<<UDRE0)));
     4cc:	40 91 c0 00 	lds	r20, 0x00C0
     4d0:	45 ff       	sbrs	r20, 5
     4d2:	fc cf       	rjmp	.-8      	; 0x4cc <enviar+0xa>
        UDR0=Tx[i];
     4d4:	49 91       	ld	r20, Y+
     4d6:	40 93 c6 00 	sts	0x00C6, r20
void enviar(char *Tx)
{
    int i=0;

    //strcat(Tx,"<");
    while(i<=strlen(Tx))
     4da:	fc 01       	movw	r30, r24
     4dc:	01 90       	ld	r0, Z+
     4de:	00 20       	and	r0, r0
     4e0:	e9 f7       	brne	.-6      	; 0x4dc <enviar+0x1a>
     4e2:	31 97       	sbiw	r30, 0x01	; 1
     4e4:	e8 1b       	sub	r30, r24
     4e6:	f9 0b       	sbc	r31, r25
    UCSR0B= 0b00011000;
    UCSR0B|=0x80;
    SREG |= 0x80;
}

void enviar(char *Tx)
     4e8:	ae 01       	movw	r20, r28
     4ea:	42 1b       	sub	r20, r18
     4ec:	53 0b       	sbc	r21, r19
{
    int i=0;

    //strcat(Tx,"<");
    while(i<=strlen(Tx))
     4ee:	e4 17       	cp	r30, r20
     4f0:	f5 07       	cpc	r31, r21
     4f2:	60 f7       	brcc	.-40     	; 0x4cc <enviar+0xa>
    {
        while(!(UCSR0A & (1<<UDRE0)));
        UDR0=Tx[i];
        i++;
    }
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <__vector_18>:

ISR (USART_RX_vect)
{
     4fa:	1f 92       	push	r1
     4fc:	0f 92       	push	r0
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	8f 93       	push	r24
    rx=UDR0;
     506:	80 91 c6 00 	lds	r24, 0x00C6
     50a:	80 93 92 01 	sts	0x0192, r24
    flag_rx=1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	80 93 8c 01 	sts	0x018C, r24
}
     514:	8f 91       	pop	r24
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <processar_RX>:

void processar_RX()
{
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	c8 5c       	subi	r28, 0xC8	; 200
     52a:	d1 09       	sbc	r29, r1
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
    char buffer_Tx[200];

    if(rx=='1')
     536:	80 91 92 01 	lds	r24, 0x0192
     53a:	81 33       	cpi	r24, 0x31	; 49
     53c:	61 f4       	brne	.+24     	; 0x556 <processar_RX+0x36>
    {
        PORTB|=(1<<PB0);
     53e:	28 9a       	sbi	0x05, 0	; 5
        sprintf(buffer_Tx,"a");
     540:	6a e0       	ldi	r22, 0x0A	; 10
     542:	71 e0       	ldi	r23, 0x01	; 1
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	0e 94 1a 06 	call	0xc34	; 0xc34 <strcpy>
        enviar(buffer_Tx);
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	0e 94 61 02 	call	0x4c2	; 0x4c2 <enviar>
     554:	01 c0       	rjmp	.+2      	; 0x558 <processar_RX+0x38>
    }
    else
        PORTB&=~(1<<PB0);
     556:	28 98       	cbi	0x05, 0	; 5
    flag_rx=0;
     558:	10 92 8c 01 	sts	0x018C, r1
}
     55c:	c8 53       	subi	r28, 0x38	; 56
     55e:	df 4f       	sbci	r29, 0xFF	; 255
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
    set_bit(DDRB,1); // CE output
     570:	21 9a       	sbi	0x04, 1	; 4
    set_bit(DDRB,2); // CSN output
     572:	22 9a       	sbi	0x04, 2	; 4
    set_bit(DDRB,5); // SCK output
     574:	25 9a       	sbi	0x04, 5	; 4
    set_bit(DDRB,3); // MOSI output
     576:	23 9a       	sbi	0x04, 3	; 4
    clr_bit(DDRB,4); // MISO input
     578:	24 98       	cbi	0x04, 4	; 4
     57a:	08 95       	ret

0000057c <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
     57c:	88 23       	and	r24, r24
     57e:	11 f0       	breq	.+4      	; 0x584 <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(PORTB,1);
     580:	29 9a       	sbi	0x05, 1	; 5
     582:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,1);
     584:	29 98       	cbi	0x05, 1	; 5
     586:	08 95       	ret

00000588 <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
     588:	88 23       	and	r24, r24
     58a:	11 f0       	breq	.+4      	; 0x590 <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(PORTB,2);
     58c:	2a 9a       	sbi	0x05, 2	; 5
     58e:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,2);
     590:	2a 98       	cbi	0x05, 2	; 5
     592:	08 95       	ret

00000594 <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
     594:	88 23       	and	r24, r24
     596:	11 f0       	breq	.+4      	; 0x59c <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(PORTB,5);
     598:	2d 9a       	sbi	0x05, 5	; 5
     59a:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,5);
     59c:	2d 98       	cbi	0x05, 5	; 5
     59e:	08 95       	ret

000005a0 <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
     5a0:	88 23       	and	r24, r24
     5a2:	11 f0       	breq	.+4      	; 0x5a8 <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(PORTB,3);
     5a4:	2b 9a       	sbi	0x05, 3	; 5
     5a6:	08 95       	ret
    }
    else
    {
        clr_bit(PORTB,3);
     5a8:	2b 98       	cbi	0x05, 3	; 5
     5aa:	08 95       	ret

000005ac <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(PINB,4);
     5ac:	83 b1       	in	r24, 0x03	; 3
}
     5ae:	80 71       	andi	r24, 0x10	; 16
     5b0:	08 95       	ret

000005b2 <xputc>:

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
     5b2:	e0 91 89 01 	lds	r30, 0x0189
     5b6:	f0 91 8a 01 	lds	r31, 0x018A
     5ba:	30 97       	sbiw	r30, 0x00	; 0
     5bc:	31 f0       	breq	.+12     	; 0x5ca <xputc+0x18>
		*outptr++ = (unsigned char)c;
     5be:	81 93       	st	Z+, r24
     5c0:	f0 93 8a 01 	sts	0x018A, r31
     5c4:	e0 93 89 01 	sts	0x0189, r30
		return;
     5c8:	08 95       	ret
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
     5ca:	e0 91 5b 02 	lds	r30, 0x025B
     5ce:	f0 91 5c 02 	lds	r31, 0x025C
     5d2:	30 97       	sbiw	r30, 0x00	; 0
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <xputc+0x26>
     5d6:	09 94       	ijmp
     5d8:	08 95       	ret

000005da <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
	while (*str)
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <xputs+0xc>
		xputc(*str++);
     5e2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
	while (*str)
     5e6:	89 91       	ld	r24, Y+
     5e8:	81 11       	cpse	r24, r1
     5ea:	fb cf       	rjmp	.-10     	; 0x5e2 <xputs+0x8>
		xputc(*str++);
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
     5f2:	2f 92       	push	r2
     5f4:	3f 92       	push	r3
     5f6:	4f 92       	push	r4
     5f8:	5f 92       	push	r5
     5fa:	6f 92       	push	r6
     5fc:	7f 92       	push	r7
     5fe:	8f 92       	push	r8
     600:	9f 92       	push	r9
     602:	af 92       	push	r10
     604:	bf 92       	push	r11
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	65 97       	sbiw	r28, 0x15	; 21
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
     626:	8c 01       	movw	r16, r24
     628:	3b 01       	movw	r6, r22
		do {
			d = (char)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s));
		if (f & 8) s[i++] = '-';
     62a:	3d e2       	ldi	r19, 0x2D	; 45
     62c:	23 2e       	mov	r2, r19
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
     62e:	d8 01       	movw	r26, r16
     630:	8c 91       	ld	r24, X
		if (!c) break;				/* End of format? */
     632:	88 23       	and	r24, r24
     634:	09 f4       	brne	.+2      	; 0x638 <xvprintf+0x46>
     636:	5a c1       	rjmp	.+692    	; 0x8ec <xvprintf+0x2fa>
		if (c != '%') {				/* Pass through it if not a % sequense */
     638:	85 32       	cpi	r24, 0x25	; 37
     63a:	19 f0       	breq	.+6      	; 0x642 <xvprintf+0x50>
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
     63c:	0f 5f       	subi	r16, 0xFF	; 255
     63e:	1f 4f       	sbci	r17, 0xFF	; 255
     640:	a5 c0       	rjmp	.+330    	; 0x78c <xvprintf+0x19a>
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
     642:	f8 01       	movw	r30, r16
     644:	31 80       	ldd	r3, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padded */
     646:	f0 e3       	ldi	r31, 0x30	; 48
     648:	3f 12       	cpse	r3, r31
     64a:	09 c0       	rjmp	.+18     	; 0x65e <xvprintf+0x6c>
			f = 1; c = *fmt++;
     64c:	d8 01       	movw	r26, r16
     64e:	12 96       	adiw	r26, 0x02	; 2
     650:	3c 90       	ld	r3, X
     652:	0d 5f       	subi	r16, 0xFD	; 253
     654:	1f 4f       	sbci	r17, 0xFF	; 255
     656:	ee 24       	eor	r14, r14
     658:	e3 94       	inc	r14
     65a:	f1 2c       	mov	r15, r1
     65c:	0f c0       	rjmp	.+30     	; 0x67c <xvprintf+0x8a>
		} else {
			if (c == '-') {			/* Flag: left justified */
     65e:	bd e2       	ldi	r27, 0x2D	; 45
     660:	3b 16       	cp	r3, r27
     662:	29 f0       	breq	.+10     	; 0x66e <xvprintf+0x7c>
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
     664:	0e 5f       	subi	r16, 0xFE	; 254
     666:	1f 4f       	sbci	r17, 0xFF	; 255
		c = *fmt++;					/* Get a char */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
     668:	e1 2c       	mov	r14, r1
     66a:	f1 2c       	mov	r15, r1
     66c:	07 c0       	rjmp	.+14     	; 0x67c <xvprintf+0x8a>
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: '0' padded */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
     66e:	f8 01       	movw	r30, r16
     670:	32 80       	ldd	r3, Z+2	; 0x02
     672:	0d 5f       	subi	r16, 0xFD	; 253
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	e9 2e       	mov	r14, r25
     67a:	f1 2c       	mov	r15, r1
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
     67c:	c1 2c       	mov	r12, r1
     67e:	d1 2c       	mov	r13, r1
     680:	11 c0       	rjmp	.+34     	; 0x6a4 <xvprintf+0xb2>
			w = w * 10 + c - '0';
     682:	8a e0       	ldi	r24, 0x0A	; 10
     684:	96 01       	movw	r18, r12
     686:	82 9f       	mul	r24, r18
     688:	60 01       	movw	r12, r0
     68a:	83 9f       	mul	r24, r19
     68c:	d0 0c       	add	r13, r0
     68e:	11 24       	eor	r1, r1
     690:	c3 0c       	add	r12, r3
     692:	d1 1c       	adc	r13, r1
     694:	37 fc       	sbrc	r3, 7
     696:	da 94       	dec	r13
     698:	90 e3       	ldi	r25, 0x30	; 48
     69a:	c9 1a       	sub	r12, r25
     69c:	d1 08       	sbc	r13, r1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
     69e:	d8 01       	movw	r26, r16
     6a0:	3d 90       	ld	r3, X+
     6a2:	8d 01       	movw	r16, r26
     6a4:	83 2d       	mov	r24, r3
     6a6:	80 53       	subi	r24, 0x30	; 48
     6a8:	8a 30       	cpi	r24, 0x0A	; 10
     6aa:	58 f3       	brcs	.-42     	; 0x682 <xvprintf+0x90>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
     6ac:	bc e6       	ldi	r27, 0x6C	; 108
     6ae:	3b 16       	cp	r3, r27
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <xvprintf+0xc6>
     6b2:	ec e4       	ldi	r30, 0x4C	; 76
     6b4:	3e 12       	cpse	r3, r30
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <xvprintf+0xd0>
			f |= 4; c = *fmt++;
     6b8:	68 94       	set
     6ba:	e2 f8       	bld	r14, 2
     6bc:	d8 01       	movw	r26, r16
     6be:	3d 90       	ld	r3, X+
     6c0:	8d 01       	movw	r16, r26
		}
		if (!c) break;				/* End of format? */
     6c2:	33 20       	and	r3, r3
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <xvprintf+0xd6>
     6c6:	12 c1       	rjmp	.+548    	; 0x8ec <xvprintf+0x2fa>
		d = c;
		if (d >= 'a') d -= 0x20;
     6c8:	b0 e6       	ldi	r27, 0x60	; 96
     6ca:	23 2d       	mov	r18, r3
     6cc:	b3 15       	cp	r27, r3
     6ce:	0c f4       	brge	.+2      	; 0x6d2 <xvprintf+0xe0>
     6d0:	20 52       	subi	r18, 0x20	; 32
		switch (d) {				/* Type is... */
     6d2:	2f 34       	cpi	r18, 0x4F	; 79
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <xvprintf+0xe6>
     6d6:	60 c0       	rjmp	.+192    	; 0x798 <xvprintf+0x1a6>
     6d8:	4c f4       	brge	.+18     	; 0x6ec <xvprintf+0xfa>
     6da:	23 34       	cpi	r18, 0x43	; 67
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <xvprintf+0xee>
     6de:	48 c0       	rjmp	.+144    	; 0x770 <xvprintf+0x17e>
     6e0:	24 34       	cpi	r18, 0x44	; 68
     6e2:	69 f0       	breq	.+26     	; 0x6fe <xvprintf+0x10c>
     6e4:	22 34       	cpi	r18, 0x42	; 66
     6e6:	09 f0       	breq	.+2      	; 0x6ea <xvprintf+0xf8>
     6e8:	50 c0       	rjmp	.+160    	; 0x78a <xvprintf+0x198>
     6ea:	53 c0       	rjmp	.+166    	; 0x792 <xvprintf+0x1a0>
     6ec:	25 35       	cpi	r18, 0x55	; 85
     6ee:	39 f0       	breq	.+14     	; 0x6fe <xvprintf+0x10c>
     6f0:	28 35       	cpi	r18, 0x58	; 88
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <xvprintf+0x104>
     6f4:	47 c0       	rjmp	.+142    	; 0x784 <xvprintf+0x192>
     6f6:	23 35       	cpi	r18, 0x53	; 83
     6f8:	09 f0       	breq	.+2      	; 0x6fc <xvprintf+0x10a>
     6fa:	47 c0       	rjmp	.+142    	; 0x78a <xvprintf+0x198>
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <xvprintf+0x112>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
     6fe:	4a e0       	ldi	r20, 0x0A	; 10
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	4c c0       	rjmp	.+152    	; 0x79c <xvprintf+0x1aa>
		if (!c) break;				/* End of format? */
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
     704:	53 01       	movw	r10, r6
     706:	e2 e0       	ldi	r30, 0x02	; 2
     708:	ae 0e       	add	r10, r30
     70a:	b1 1c       	adc	r11, r1
     70c:	d3 01       	movw	r26, r6
     70e:	5c 90       	ld	r5, X
     710:	11 96       	adiw	r26, 0x01	; 1
     712:	9c 91       	ld	r25, X
     714:	25 2d       	mov	r18, r5
     716:	39 2f       	mov	r19, r25
			for (j = 0; p[j]; j++) ;
     718:	f9 01       	movw	r30, r18
    xprintf("%c", 'a');				"a"
    xprintf("%f", 10.0);            <xprintf lacks floating point support>
*/

static
void xvprintf (
     71a:	4f 01       	movw	r8, r30
     71c:	82 1a       	sub	r8, r18
     71e:	93 0a       	sbc	r9, r19
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++) ;
     720:	81 91       	ld	r24, Z+
     722:	81 11       	cpse	r24, r1
     724:	fa cf       	rjmp	.-12     	; 0x71a <xvprintf+0x128>
     726:	07 c0       	rjmp	.+14     	; 0x736 <xvprintf+0x144>
			while (!(f & 2) && j++ < w) xputc(' ');
     728:	80 e2       	ldi	r24, 0x20	; 32
     72a:	9d 8b       	std	Y+21, r25	; 0x15
     72c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
     730:	43 01       	movw	r8, r6
     732:	9d 89       	ldd	r25, Y+21	; 0x15
     734:	03 c0       	rjmp	.+6      	; 0x73c <xvprintf+0x14a>
     736:	b2 e0       	ldi	r27, 0x02	; 2
     738:	eb 22       	and	r14, r27
     73a:	ff 24       	eor	r15, r15
     73c:	e1 14       	cp	r14, r1
     73e:	f1 04       	cpc	r15, r1
     740:	41 f4       	brne	.+16     	; 0x752 <xvprintf+0x160>
     742:	34 01       	movw	r6, r8
     744:	ef ef       	ldi	r30, 0xFF	; 255
     746:	6e 1a       	sub	r6, r30
     748:	7e 0a       	sbc	r7, r30
     74a:	8c 14       	cp	r8, r12
     74c:	9d 04       	cpc	r9, r13
     74e:	60 f3       	brcs	.-40     	; 0x728 <xvprintf+0x136>
     750:	43 01       	movw	r8, r6
			xputs(p);
     752:	85 2d       	mov	r24, r5
     754:	0e 94 ed 02 	call	0x5da	; 0x5da <xputs>
			while (j++ < w) xputc(' ');
     758:	06 c0       	rjmp	.+12     	; 0x766 <xvprintf+0x174>
     75a:	80 e2       	ldi	r24, 0x20	; 32
     75c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
     760:	ff ef       	ldi	r31, 0xFF	; 255
     762:	8f 1a       	sub	r8, r31
     764:	9f 0a       	sbc	r9, r31
     766:	8c 14       	cp	r8, r12
     768:	9d 04       	cpc	r9, r13
     76a:	b8 f3       	brcs	.-18     	; 0x75a <xvprintf+0x168>
		if (!c) break;				/* End of format? */
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
     76c:	35 01       	movw	r6, r10
     76e:	5f cf       	rjmp	.-322    	; 0x62e <xvprintf+0x3c>
			while (!(f & 2) && j++ < w) xputc(' ');
			xputs(p);
			while (j++ < w) xputc(' ');
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
     770:	73 01       	movw	r14, r6
     772:	22 e0       	ldi	r18, 0x02	; 2
     774:	e2 0e       	add	r14, r18
     776:	f1 1c       	adc	r15, r1
     778:	d3 01       	movw	r26, r6
     77a:	8c 91       	ld	r24, X
     77c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
     780:	37 01       	movw	r6, r14
     782:	55 cf       	rjmp	.-342    	; 0x62e <xvprintf+0x3c>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
     784:	40 e1       	ldi	r20, 0x10	; 16
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	09 c0       	rjmp	.+18     	; 0x79c <xvprintf+0x1aa>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
     78a:	83 2d       	mov	r24, r3
     78c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
     790:	4e cf       	rjmp	.-356    	; 0x62e <xvprintf+0x3c>
			while (j++ < w) xputc(' ');
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
     792:	42 e0       	ldi	r20, 0x02	; 2
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <xvprintf+0x1aa>
		case 'O' :					/* Octal */
			r = 8; break;
     798:	48 e0       	ldi	r20, 0x08	; 8
     79a:	50 e0       	ldi	r21, 0x00	; 0
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
     79c:	e2 fe       	sbrs	r14, 2
     79e:	0c c0       	rjmp	.+24     	; 0x7b8 <xvprintf+0x1c6>
     7a0:	43 01       	movw	r8, r6
     7a2:	b4 e0       	ldi	r27, 0x04	; 4
     7a4:	8b 0e       	add	r8, r27
     7a6:	91 1c       	adc	r9, r1
     7a8:	f3 01       	movw	r30, r6
     7aa:	60 81       	ld	r22, Z
     7ac:	71 81       	ldd	r23, Z+1	; 0x01
     7ae:	82 81       	ldd	r24, Z+2	; 0x02
     7b0:	93 81       	ldd	r25, Z+3	; 0x03
		if (d == 'D' && (v & 0x80000000)) {
     7b2:	24 34       	cpi	r18, 0x44	; 68
     7b4:	f9 f4       	brne	.+62     	; 0x7f4 <xvprintf+0x202>
     7b6:	13 c0       	rjmp	.+38     	; 0x7de <xvprintf+0x1ec>
     7b8:	c3 01       	movw	r24, r6
     7ba:	02 96       	adiw	r24, 0x02	; 2
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
     7bc:	4c 01       	movw	r8, r24
     7be:	24 34       	cpi	r18, 0x44	; 68
     7c0:	41 f4       	brne	.+16     	; 0x7d2 <xvprintf+0x1e0>
     7c2:	d3 01       	movw	r26, r6
     7c4:	6d 91       	ld	r22, X+
     7c6:	7c 91       	ld	r23, X
     7c8:	88 27       	eor	r24, r24
     7ca:	77 fd       	sbrc	r23, 7
     7cc:	80 95       	com	r24
     7ce:	98 2f       	mov	r25, r24
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <xvprintf+0x1ec>
     7d2:	f3 01       	movw	r30, r6
     7d4:	60 81       	ld	r22, Z
     7d6:	71 81       	ldd	r23, Z+1	; 0x01
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0b c0       	rjmp	.+22     	; 0x7f4 <xvprintf+0x202>
		if (d == 'D' && (v & 0x80000000)) {
     7de:	97 ff       	sbrs	r25, 7
     7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <xvprintf+0x202>
			v = 0 - v;
     7e2:	90 95       	com	r25
     7e4:	80 95       	com	r24
     7e6:	70 95       	com	r23
     7e8:	61 95       	neg	r22
     7ea:	7f 4f       	sbci	r23, 0xFF	; 255
     7ec:	8f 4f       	sbci	r24, 0xFF	; 255
     7ee:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
     7f0:	68 94       	set
     7f2:	e3 f8       	bld	r14, 3
     7f4:	9e 01       	movw	r18, r28
     7f6:	2f 5f       	subi	r18, 0xFF	; 255
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	3c 8b       	std	Y+20, r19	; 0x14
     7fc:	2b 8b       	std	Y+19, r18	; 0x13
		}
		i = 0;
     7fe:	a1 2c       	mov	r10, r1
     800:	b1 2c       	mov	r11, r1
		do {
			d = (char)(v % r); v /= r;
     802:	2a 01       	movw	r4, r20
     804:	61 2c       	mov	r6, r1
     806:	71 2c       	mov	r7, r1
     808:	02 c0       	rjmp	.+4      	; 0x80e <xvprintf+0x21c>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
     80a:	a9 88       	ldd	r10, Y+17	; 0x11
     80c:	ba 88       	ldd	r11, Y+18	; 0x12
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (char)(v % r); v /= r;
     80e:	a3 01       	movw	r20, r6
     810:	92 01       	movw	r18, r4
     812:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__udivmodsi4>
     816:	f6 2f       	mov	r31, r22
     818:	e6 2f       	mov	r30, r22
     81a:	ca 01       	movw	r24, r20
     81c:	b9 01       	movw	r22, r18
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
     81e:	fa 30       	cpi	r31, 0x0A	; 10
     820:	3c f0       	brlt	.+14     	; 0x830 <xvprintf+0x23e>
     822:	a8 e7       	ldi	r26, 0x78	; 120
     824:	3a 12       	cpse	r3, r26
     826:	02 c0       	rjmp	.+4      	; 0x82c <xvprintf+0x23a>
     828:	f7 e2       	ldi	r31, 0x27	; 39
     82a:	01 c0       	rjmp	.+2      	; 0x82e <xvprintf+0x23c>
     82c:	f7 e0       	ldi	r31, 0x07	; 7
     82e:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
     830:	e0 5d       	subi	r30, 0xD0	; 208
     832:	ab 89       	ldd	r26, Y+19	; 0x13
     834:	bc 89       	ldd	r27, Y+20	; 0x14
     836:	ed 93       	st	X+, r30
     838:	bc 8b       	std	Y+20, r27	; 0x14
     83a:	ab 8b       	std	Y+19, r26	; 0x13
     83c:	f5 01       	movw	r30, r10
     83e:	31 96       	adiw	r30, 0x01	; 1
     840:	fa 8b       	std	Y+18, r31	; 0x12
     842:	e9 8b       	std	Y+17, r30	; 0x11
		} while (v && i < sizeof(s));
     844:	23 2b       	or	r18, r19
     846:	24 2b       	or	r18, r20
     848:	25 2b       	or	r18, r21
     84a:	29 f0       	breq	.+10     	; 0x856 <xvprintf+0x264>
     84c:	70 97       	sbiw	r30, 0x10	; 16
     84e:	e9 f6       	brne	.-70     	; 0x80a <xvprintf+0x218>
     850:	8f e0       	ldi	r24, 0x0F	; 15
     852:	a8 2e       	mov	r10, r24
     854:	b1 2c       	mov	r11, r1
		if (f & 8) s[i++] = '-';
     856:	e3 fe       	sbrs	r14, 3
     858:	0e c0       	rjmp	.+28     	; 0x876 <xvprintf+0x284>
     85a:	e1 e0       	ldi	r30, 0x01	; 1
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	ec 0f       	add	r30, r28
     860:	fd 1f       	adc	r31, r29
     862:	29 89       	ldd	r18, Y+17	; 0x11
     864:	3a 89       	ldd	r19, Y+18	; 0x12
     866:	e2 0f       	add	r30, r18
     868:	f3 1f       	adc	r31, r19
     86a:	20 82       	st	Z, r2
     86c:	95 01       	movw	r18, r10
     86e:	2e 5f       	subi	r18, 0xFE	; 254
     870:	3f 4f       	sbci	r19, 0xFF	; 255
     872:	3a 8b       	std	Y+18, r19	; 0x12
     874:	29 8b       	std	Y+17, r18	; 0x11
		j = i; d = (f & 1) ? '0' : ' ';
     876:	e0 fe       	sbrs	r14, 0
     878:	02 c0       	rjmp	.+4      	; 0x87e <xvprintf+0x28c>
     87a:	90 e3       	ldi	r25, 0x30	; 48
     87c:	01 c0       	rjmp	.+2      	; 0x880 <xvprintf+0x28e>
     87e:	90 e2       	ldi	r25, 0x20	; 32
     880:	a9 88       	ldd	r10, Y+17	; 0x11
     882:	ba 88       	ldd	r11, Y+18	; 0x12
		while (!(f & 2) && j++ < w) xputc(d);
     884:	32 e0       	ldi	r19, 0x02	; 2
     886:	e3 22       	and	r14, r19
     888:	ff 24       	eor	r15, r15
     88a:	06 c0       	rjmp	.+12     	; 0x898 <xvprintf+0x2a6>
     88c:	89 2f       	mov	r24, r25
     88e:	9d 8b       	std	Y+21, r25	; 0x15
     890:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
     894:	53 01       	movw	r10, r6
     896:	9d 89       	ldd	r25, Y+21	; 0x15
     898:	e1 14       	cp	r14, r1
     89a:	f1 04       	cpc	r15, r1
     89c:	41 f4       	brne	.+16     	; 0x8ae <xvprintf+0x2bc>
     89e:	35 01       	movw	r6, r10
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 1a       	sub	r6, r24
     8a4:	78 0a       	sbc	r7, r24
     8a6:	ac 14       	cp	r10, r12
     8a8:	bd 04       	cpc	r11, r13
     8aa:	80 f3       	brcs	.-32     	; 0x88c <xvprintf+0x29a>
     8ac:	53 01       	movw	r10, r6
		do xputc(s[--i]); while(i);
     8ae:	29 89       	ldd	r18, Y+17	; 0x11
     8b0:	3a 89       	ldd	r19, Y+18	; 0x12
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	31 09       	sbc	r19, r1
     8b6:	3a 8b       	std	Y+18, r19	; 0x12
     8b8:	29 8b       	std	Y+17, r18	; 0x11
    xprintf("%c", 'a');				"a"
    xprintf("%f", 10.0);            <xprintf lacks floating point support>
*/

static
void xvprintf (
     8ba:	e1 e0       	ldi	r30, 0x01	; 1
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	ec 0f       	add	r30, r28
     8c0:	fd 1f       	adc	r31, r29
     8c2:	e2 0f       	add	r30, r18
     8c4:	f3 1f       	adc	r31, r19
			s[i++] = d + '0';
		} while (v && i < sizeof(s));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) xputc(d);
		do xputc(s[--i]); while(i);
     8c6:	80 81       	ld	r24, Z
     8c8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
     8cc:	29 89       	ldd	r18, Y+17	; 0x11
     8ce:	3a 89       	ldd	r19, Y+18	; 0x12
     8d0:	23 2b       	or	r18, r19
     8d2:	69 f7       	brne	.-38     	; 0x8ae <xvprintf+0x2bc>
     8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <xvprintf+0x2f0>
		while (j++ < w) xputc(' ');
     8d6:	80 e2       	ldi	r24, 0x20	; 32
     8d8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
     8dc:	3f ef       	ldi	r19, 0xFF	; 255
     8de:	a3 1a       	sub	r10, r19
     8e0:	b3 0a       	sbc	r11, r19
     8e2:	ac 14       	cp	r10, r12
     8e4:	bd 04       	cpc	r11, r13
     8e6:	b8 f3       	brcs	.-18     	; 0x8d6 <xvprintf+0x2e4>
     8e8:	34 01       	movw	r6, r8
     8ea:	a1 ce       	rjmp	.-702    	; 0x62e <xvprintf+0x3c>
	}
}
     8ec:	65 96       	adiw	r28, 0x15	; 21
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	bf 90       	pop	r11
     90a:	af 90       	pop	r10
     90c:	9f 90       	pop	r9
     90e:	8f 90       	pop	r8
     910:	7f 90       	pop	r7
     912:	6f 90       	pop	r6
     914:	5f 90       	pop	r5
     916:	4f 90       	pop	r4
     918:	3f 90       	pop	r3
     91a:	2f 90       	pop	r2
     91c:	08 95       	ret

0000091e <xfputs>:

void xfputs (					/* Put a string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	str				/* Pointer to the string */
)
{
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
     926:	00 91 5b 02 	lds	r16, 0x025B
     92a:	10 91 5c 02 	lds	r17, 0x025C
	xfunc_out = func;	/* Switch output to specified device */
     92e:	90 93 5c 02 	sts	0x025C, r25
     932:	80 93 5b 02 	sts	0x025B, r24
     936:	eb 01       	movw	r28, r22
	while (*str)		/* Put the string */
     938:	02 c0       	rjmp	.+4      	; 0x93e <xfputs+0x20>
		xputc(*str++);
     93a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
	xfunc_out = func;	/* Switch output to specified device */
	while (*str)		/* Put the string */
     93e:	89 91       	ld	r24, Y+
     940:	81 11       	cpse	r24, r1
     942:	fb cf       	rjmp	.-10     	; 0x93a <xfputs+0x1c>
		xputc(*str++);
	xfunc_out = pf;		/* Restore output device */
     944:	10 93 5c 02 	sts	0x025C, r17
     948:	00 93 5b 02 	sts	0x025B, r16
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	08 95       	ret

00000956 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	fe 01       	movw	r30, r28
     960:	35 96       	adiw	r30, 0x05	; 5
     962:	81 91       	ld	r24, Z+
     964:	91 91       	ld	r25, Z+
	va_list arp;


	va_start(arp, fmt);
	xvprintf(fmt, arp);
     966:	bf 01       	movw	r22, r30
     968:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <xvprintf>
	va_end(arp);
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
	va_list arp;


	outptr = buff;		/* Switch destination for memory */
     97a:	8d 81       	ldd	r24, Y+5	; 0x05
     97c:	9e 81       	ldd	r25, Y+6	; 0x06
     97e:	90 93 8a 01 	sts	0x018A, r25
     982:	80 93 89 01 	sts	0x0189, r24

	va_start(arp, fmt);
     986:	ce 01       	movw	r24, r28
     988:	09 96       	adiw	r24, 0x09	; 9
	xvprintf(fmt, arp);
     98a:	bc 01       	movw	r22, r24
     98c:	8f 81       	ldd	r24, Y+7	; 0x07
     98e:	98 85       	ldd	r25, Y+8	; 0x08
     990:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <xvprintf>
	va_end(arp);

	*outptr = 0;		/* Terminate output string with a \0 */
     994:	e0 91 89 01 	lds	r30, 0x0189
     998:	f0 91 8a 01 	lds	r31, 0x018A
     99c:	10 82       	st	Z, r1
	outptr = 0;			/* Switch destination for device */
     99e:	10 92 8a 01 	sts	0x018A, r1
     9a2:	10 92 89 01 	sts	0x0189, r1
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <xfprintf>:
void xfprintf (					/* Put a formatted string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	fmt,			/* Pointer to the format string */
	...							/* Optional arguments */
)
{
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
	va_list arp;
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
     9b8:	00 91 5b 02 	lds	r16, 0x025B
     9bc:	10 91 5c 02 	lds	r17, 0x025C
	xfunc_out = func;	/* Switch output to specified device */
     9c0:	8f 81       	ldd	r24, Y+7	; 0x07
     9c2:	98 85       	ldd	r25, Y+8	; 0x08
     9c4:	90 93 5c 02 	sts	0x025C, r25
     9c8:	80 93 5b 02 	sts	0x025B, r24

	va_start(arp, fmt);
     9cc:	ce 01       	movw	r24, r28
     9ce:	0b 96       	adiw	r24, 0x0b	; 11
	xvprintf(fmt, arp);
     9d0:	bc 01       	movw	r22, r24
     9d2:	89 85       	ldd	r24, Y+9	; 0x09
     9d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <xvprintf>
	va_end(arp);

	xfunc_out = pf;		/* Restore output device */
     9da:	10 93 5c 02 	sts	0x025C, r17
     9de:	00 93 5b 02 	sts	0x025B, r16
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <put_dump>:
     9ec:	af 92       	push	r10
     9ee:	bf 92       	push	r11
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	00 d0       	rcall	.+0      	; 0xa02 <put_dump+0x16>
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	59 01       	movw	r10, r18
     a08:	7f 93       	push	r23
     a0a:	6f 93       	push	r22
     a0c:	5f 93       	push	r21
     a0e:	4f 93       	push	r20
     a10:	2e e6       	ldi	r18, 0x6E	; 110
     a12:	31 e0       	ldi	r19, 0x01	; 1
     a14:	3f 93       	push	r19
     a16:	2f 93       	push	r18
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	0e 94 ab 04 	call	0x956	; 0x956 <xprintf>
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	02 30       	cpi	r16, 0x02	; 2
     a32:	11 05       	cpc	r17, r1
     a34:	c1 f1       	breq	.+112    	; 0xaa6 <put_dump+0xba>
     a36:	04 30       	cpi	r16, 0x04	; 4
     a38:	11 05       	cpc	r17, r1
     a3a:	09 f4       	brne	.+2      	; 0xa3e <put_dump+0x52>
     a3c:	4d c0       	rjmp	.+154    	; 0xad8 <put_dump+0xec>
     a3e:	01 30       	cpi	r16, 0x01	; 1
     a40:	11 05       	cpc	r17, r1
     a42:	09 f0       	breq	.+2      	; 0xa46 <put_dump+0x5a>
     a44:	67 c0       	rjmp	.+206    	; 0xb14 <put_dump+0x128>
     a46:	8c 01       	movw	r16, r24
     a48:	78 01       	movw	r14, r16
     a4a:	65 e7       	ldi	r22, 0x75	; 117
     a4c:	c6 2e       	mov	r12, r22
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	d6 2e       	mov	r13, r22
     a52:	0d c0       	rjmp	.+26     	; 0xa6e <put_dump+0x82>
     a54:	f7 01       	movw	r30, r14
     a56:	81 91       	ld	r24, Z+
     a58:	7f 01       	movw	r14, r30
     a5a:	1f 92       	push	r1
     a5c:	8f 93       	push	r24
     a5e:	df 92       	push	r13
     a60:	cf 92       	push	r12
     a62:	0e 94 ab 04 	call	0x956	; 0x956 <xprintf>
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	c7 01       	movw	r24, r14
     a70:	80 1b       	sub	r24, r16
     a72:	91 0b       	sbc	r25, r17
     a74:	8a 15       	cp	r24, r10
     a76:	9b 05       	cpc	r25, r11
     a78:	6c f3       	brlt	.-38     	; 0xa54 <put_dump+0x68>
     a7a:	80 e2       	ldi	r24, 0x20	; 32
     a7c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
     a80:	78 01       	movw	r14, r16
     a82:	0a c0       	rjmp	.+20     	; 0xa98 <put_dump+0xac>
     a84:	f7 01       	movw	r30, r14
     a86:	81 91       	ld	r24, Z+
     a88:	7f 01       	movw	r14, r30
     a8a:	98 2f       	mov	r25, r24
     a8c:	90 52       	subi	r25, 0x20	; 32
     a8e:	9f 35       	cpi	r25, 0x5F	; 95
     a90:	08 f0       	brcs	.+2      	; 0xa94 <put_dump+0xa8>
     a92:	8e e2       	ldi	r24, 0x2E	; 46
     a94:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <xputc>
     a98:	c7 01       	movw	r24, r14
     a9a:	80 1b       	sub	r24, r16
     a9c:	91 0b       	sbc	r25, r17
     a9e:	8a 15       	cp	r24, r10
     aa0:	9b 05       	cpc	r25, r11
     aa2:	84 f3       	brlt	.-32     	; 0xa84 <put_dump+0x98>
     aa4:	37 c0       	rjmp	.+110    	; 0xb14 <put_dump+0x128>
     aa6:	8c 01       	movw	r16, r24
     aa8:	5b e7       	ldi	r21, 0x7B	; 123
     aaa:	e5 2e       	mov	r14, r21
     aac:	51 e0       	ldi	r21, 0x01	; 1
     aae:	f5 2e       	mov	r15, r21
     ab0:	f8 01       	movw	r30, r16
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	0e 5f       	subi	r16, 0xFE	; 254
     ab8:	1f 4f       	sbci	r17, 0xFF	; 255
     aba:	9f 93       	push	r25
     abc:	8f 93       	push	r24
     abe:	ff 92       	push	r15
     ac0:	ef 92       	push	r14
     ac2:	0e 94 ab 04 	call	0x956	; 0x956 <xprintf>
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	af 1a       	sub	r10, r31
     aca:	b1 08       	sbc	r11, r1
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	69 f7       	brne	.-38     	; 0xab0 <put_dump+0xc4>
     ad6:	1e c0       	rjmp	.+60     	; 0xb14 <put_dump+0x128>
     ad8:	8c 01       	movw	r16, r24
     ada:	41 e8       	ldi	r20, 0x81	; 129
     adc:	e4 2e       	mov	r14, r20
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	f4 2e       	mov	r15, r20
     ae2:	f8 01       	movw	r30, r16
     ae4:	80 81       	ld	r24, Z
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	22 81       	ldd	r18, Z+2	; 0x02
     aea:	33 81       	ldd	r19, Z+3	; 0x03
     aec:	0c 5f       	subi	r16, 0xFC	; 252
     aee:	1f 4f       	sbci	r17, 0xFF	; 255
     af0:	3f 93       	push	r19
     af2:	2f 93       	push	r18
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	ff 92       	push	r15
     afa:	ef 92       	push	r14
     afc:	0e 94 ab 04 	call	0x956	; 0x956 <xprintf>
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	af 1a       	sub	r10, r31
     b04:	b1 08       	sbc	r11, r1
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	39 f7       	brne	.-50     	; 0xae2 <put_dump+0xf6>
     b14:	8a e0       	ldi	r24, 0x0A	; 10
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <xputc>

00000b32 <main>:
     b32:	0e 94 4e 02 	call	0x49c	; 0x49c <uart_init>
     b36:	8c e0       	ldi	r24, 0x0C	; 12
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <enviar>
     b3e:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24_init>
     b42:	64 e0       	ldi	r22, 0x04	; 4
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	0e 94 83 01 	call	0x306	; 0x306 <nrf24_config>
     b4a:	85 e0       	ldi	r24, 0x05	; 5
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 2f 02 	call	0x45e	; 0x45e <nrf24_tx_address>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 3e 02 	call	0x47c	; 0x47c <nrf24_rx_address>
     b5a:	8a ea       	ldi	r24, 0xAA	; 170
     b5c:	f8 2e       	mov	r15, r24
     b5e:	95 e5       	ldi	r25, 0x55	; 85
     b60:	e9 2e       	mov	r14, r25
     b62:	02 e5       	ldi	r16, 0x52	; 82
     b64:	11 e0       	ldi	r17, 0x01	; 1
     b66:	c3 e9       	ldi	r28, 0x93	; 147
     b68:	d1 e0       	ldi	r29, 0x01	; 1
     b6a:	10 92 8e 01 	sts	0x018E, r1
     b6e:	f0 92 8f 01 	sts	0x018F, r15
     b72:	e0 92 90 01 	sts	0x0190, r14
     b76:	80 91 88 01 	lds	r24, 0x0188
     b7a:	80 93 91 01 	sts	0x0191, r24
     b7e:	8f 5f       	subi	r24, 0xFF	; 255
     b80:	80 93 88 01 	sts	0x0188, r24
     b84:	8e e8       	ldi	r24, 0x8E	; 142
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 30 01 	call	0x260	; 0x260 <nrf24_send>
     b8c:	0e 94 a9 00 	call	0x152	; 0x152 <nrf24_isSending>
     b90:	81 11       	cpse	r24, r1
     b92:	fc cf       	rjmp	.-8      	; 0xb8c <main+0x5a>
     b94:	0e 94 9d 00 	call	0x13a	; 0x13a <nrf24_lastMessageStatus>
     b98:	80 93 8d 01 	sts	0x018D, r24
     b9c:	81 11       	cpse	r24, r1
     b9e:	03 c0       	rjmp	.+6      	; 0xba6 <main+0x74>
     ba0:	82 e2       	ldi	r24, 0x22	; 34
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	04 c0       	rjmp	.+8      	; 0xbae <main+0x7c>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	21 f4       	brne	.+8      	; 0xbb2 <main+0x80>
     baa:	8a e3       	ldi	r24, 0x3A	; 58
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 61 02 	call	0x4c2	; 0x4c2 <enviar>
     bb2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <nrf24_retransmissionCount>
     bb6:	80 93 8d 01 	sts	0x018D, r24
     bba:	1f 92       	push	r1
     bbc:	8f 93       	push	r24
     bbe:	1f 93       	push	r17
     bc0:	0f 93       	push	r16
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	0e 94 21 06 	call	0xc42	; 0xc42 <sprintf>
     bca:	83 e9       	ldi	r24, 0x93	; 147
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 61 02 	call	0x4c2	; 0x4c2 <enviar>
     bd2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <nrf24_powerUpRx>
     bd6:	83 ec       	ldi	r24, 0xC3	; 195
     bd8:	99 e0       	ldi	r25, 0x09	; 9
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <main+0xa8>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <main+0xae>
     be0:	00 00       	nop
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	bd cf       	rjmp	.-134    	; 0xb6a <main+0x38>

00000bf0 <__udivmodsi4>:
     bf0:	a1 e2       	ldi	r26, 0x21	; 33
     bf2:	1a 2e       	mov	r1, r26
     bf4:	aa 1b       	sub	r26, r26
     bf6:	bb 1b       	sub	r27, r27
     bf8:	fd 01       	movw	r30, r26
     bfa:	0d c0       	rjmp	.+26     	; 0xc16 <__udivmodsi4_ep>

00000bfc <__udivmodsi4_loop>:
     bfc:	aa 1f       	adc	r26, r26
     bfe:	bb 1f       	adc	r27, r27
     c00:	ee 1f       	adc	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	a2 17       	cp	r26, r18
     c06:	b3 07       	cpc	r27, r19
     c08:	e4 07       	cpc	r30, r20
     c0a:	f5 07       	cpc	r31, r21
     c0c:	20 f0       	brcs	.+8      	; 0xc16 <__udivmodsi4_ep>
     c0e:	a2 1b       	sub	r26, r18
     c10:	b3 0b       	sbc	r27, r19
     c12:	e4 0b       	sbc	r30, r20
     c14:	f5 0b       	sbc	r31, r21

00000c16 <__udivmodsi4_ep>:
     c16:	66 1f       	adc	r22, r22
     c18:	77 1f       	adc	r23, r23
     c1a:	88 1f       	adc	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	1a 94       	dec	r1
     c20:	69 f7       	brne	.-38     	; 0xbfc <__udivmodsi4_loop>
     c22:	60 95       	com	r22
     c24:	70 95       	com	r23
     c26:	80 95       	com	r24
     c28:	90 95       	com	r25
     c2a:	9b 01       	movw	r18, r22
     c2c:	ac 01       	movw	r20, r24
     c2e:	bd 01       	movw	r22, r26
     c30:	cf 01       	movw	r24, r30
     c32:	08 95       	ret

00000c34 <strcpy>:
     c34:	fb 01       	movw	r30, r22
     c36:	dc 01       	movw	r26, r24
     c38:	01 90       	ld	r0, Z+
     c3a:	0d 92       	st	X+, r0
     c3c:	00 20       	and	r0, r0
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <strcpy+0x4>
     c40:	08 95       	ret

00000c42 <sprintf>:
     c42:	a0 e1       	ldi	r26, 0x10	; 16
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e2       	ldi	r30, 0x27	; 39
     c48:	f6 e0       	ldi	r31, 0x06	; 6
     c4a:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__prologue_saves__+0x1c>
     c4e:	0f 89       	ldd	r16, Y+23	; 0x17
     c50:	18 8d       	ldd	r17, Y+24	; 0x18
     c52:	86 e0       	ldi	r24, 0x06	; 6
     c54:	8c 83       	std	Y+4, r24	; 0x04
     c56:	1a 83       	std	Y+2, r17	; 0x02
     c58:	09 83       	std	Y+1, r16	; 0x01
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	9f e7       	ldi	r25, 0x7F	; 127
     c5e:	9e 83       	std	Y+6, r25	; 0x06
     c60:	8d 83       	std	Y+5, r24	; 0x05
     c62:	ae 01       	movw	r20, r28
     c64:	45 5e       	subi	r20, 0xE5	; 229
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	58 8b       	std	Y+16, r21	; 0x10
     c6a:	4f 87       	std	Y+15, r20	; 0x0f
     c6c:	69 8d       	ldd	r22, Y+25	; 0x19
     c6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c70:	ce 01       	movw	r24, r28
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	0e 94 45 06 	call	0xc8a	; 0xc8a <vfprintf>
     c78:	ef 81       	ldd	r30, Y+7	; 0x07
     c7a:	f8 85       	ldd	r31, Y+8	; 0x08
     c7c:	e0 0f       	add	r30, r16
     c7e:	f1 1f       	adc	r31, r17
     c80:	10 82       	st	Z, r1
     c82:	60 96       	adiw	r28, 0x10	; 16
     c84:	e4 e0       	ldi	r30, 0x04	; 4
     c86:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__epilogue_restores__+0x1c>

00000c8a <vfprintf>:
     c8a:	ac e0       	ldi	r26, 0x0C	; 12
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	eb e4       	ldi	r30, 0x4B	; 75
     c90:	f6 e0       	ldi	r31, 0x06	; 6
     c92:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__prologue_saves__>
     c96:	7c 01       	movw	r14, r24
     c98:	6b 01       	movw	r12, r22
     c9a:	8a 01       	movw	r16, r20
     c9c:	fc 01       	movw	r30, r24
     c9e:	17 82       	std	Z+7, r1	; 0x07
     ca0:	16 82       	std	Z+6, r1	; 0x06
     ca2:	83 81       	ldd	r24, Z+3	; 0x03
     ca4:	81 ff       	sbrs	r24, 1
     ca6:	c7 c1       	rjmp	.+910    	; 0x1036 <vfprintf+0x3ac>
     ca8:	88 24       	eor	r8, r8
     caa:	83 94       	inc	r8
     cac:	91 2c       	mov	r9, r1
     cae:	8c 0e       	add	r8, r28
     cb0:	9d 1e       	adc	r9, r29
     cb2:	f7 01       	movw	r30, r14
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	f6 01       	movw	r30, r12
     cb8:	93 fd       	sbrc	r25, 3
     cba:	85 91       	lpm	r24, Z+
     cbc:	93 ff       	sbrs	r25, 3
     cbe:	81 91       	ld	r24, Z+
     cc0:	6f 01       	movw	r12, r30
     cc2:	88 23       	and	r24, r24
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <vfprintf+0x3e>
     cc6:	b3 c1       	rjmp	.+870    	; 0x102e <vfprintf+0x3a4>
     cc8:	85 32       	cpi	r24, 0x25	; 37
     cca:	39 f4       	brne	.+14     	; 0xcda <vfprintf+0x50>
     ccc:	93 fd       	sbrc	r25, 3
     cce:	85 91       	lpm	r24, Z+
     cd0:	93 ff       	sbrs	r25, 3
     cd2:	81 91       	ld	r24, Z+
     cd4:	6f 01       	movw	r12, r30
     cd6:	85 32       	cpi	r24, 0x25	; 37
     cd8:	29 f4       	brne	.+10     	; 0xce4 <vfprintf+0x5a>
     cda:	b7 01       	movw	r22, r14
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 38 08 	call	0x1070	; 0x1070 <fputc>
     ce2:	e7 cf       	rjmp	.-50     	; 0xcb2 <vfprintf+0x28>
     ce4:	71 2c       	mov	r7, r1
     ce6:	31 2c       	mov	r3, r1
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	20 32       	cpi	r18, 0x20	; 32
     cec:	a8 f4       	brcc	.+42     	; 0xd18 <vfprintf+0x8e>
     cee:	8b 32       	cpi	r24, 0x2B	; 43
     cf0:	61 f0       	breq	.+24     	; 0xd0a <vfprintf+0x80>
     cf2:	28 f4       	brcc	.+10     	; 0xcfe <vfprintf+0x74>
     cf4:	80 32       	cpi	r24, 0x20	; 32
     cf6:	51 f0       	breq	.+20     	; 0xd0c <vfprintf+0x82>
     cf8:	83 32       	cpi	r24, 0x23	; 35
     cfa:	71 f4       	brne	.+28     	; 0xd18 <vfprintf+0x8e>
     cfc:	0b c0       	rjmp	.+22     	; 0xd14 <vfprintf+0x8a>
     cfe:	8d 32       	cpi	r24, 0x2D	; 45
     d00:	39 f0       	breq	.+14     	; 0xd10 <vfprintf+0x86>
     d02:	80 33       	cpi	r24, 0x30	; 48
     d04:	49 f4       	brne	.+18     	; 0xd18 <vfprintf+0x8e>
     d06:	21 60       	ori	r18, 0x01	; 1
     d08:	28 c0       	rjmp	.+80     	; 0xd5a <vfprintf+0xd0>
     d0a:	22 60       	ori	r18, 0x02	; 2
     d0c:	24 60       	ori	r18, 0x04	; 4
     d0e:	25 c0       	rjmp	.+74     	; 0xd5a <vfprintf+0xd0>
     d10:	28 60       	ori	r18, 0x08	; 8
     d12:	23 c0       	rjmp	.+70     	; 0xd5a <vfprintf+0xd0>
     d14:	20 61       	ori	r18, 0x10	; 16
     d16:	21 c0       	rjmp	.+66     	; 0xd5a <vfprintf+0xd0>
     d18:	27 fd       	sbrc	r18, 7
     d1a:	27 c0       	rjmp	.+78     	; 0xd6a <vfprintf+0xe0>
     d1c:	38 2f       	mov	r19, r24
     d1e:	30 53       	subi	r19, 0x30	; 48
     d20:	3a 30       	cpi	r19, 0x0A	; 10
     d22:	78 f4       	brcc	.+30     	; 0xd42 <vfprintf+0xb8>
     d24:	26 ff       	sbrs	r18, 6
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <vfprintf+0xaa>
     d28:	fa e0       	ldi	r31, 0x0A	; 10
     d2a:	7f 9e       	mul	r7, r31
     d2c:	30 0d       	add	r19, r0
     d2e:	11 24       	eor	r1, r1
     d30:	73 2e       	mov	r7, r19
     d32:	13 c0       	rjmp	.+38     	; 0xd5a <vfprintf+0xd0>
     d34:	8a e0       	ldi	r24, 0x0A	; 10
     d36:	38 9e       	mul	r3, r24
     d38:	30 0d       	add	r19, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	33 2e       	mov	r3, r19
     d3e:	20 62       	ori	r18, 0x20	; 32
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <vfprintf+0xd0>
     d42:	8e 32       	cpi	r24, 0x2E	; 46
     d44:	21 f4       	brne	.+8      	; 0xd4e <vfprintf+0xc4>
     d46:	26 fd       	sbrc	r18, 6
     d48:	72 c1       	rjmp	.+740    	; 0x102e <vfprintf+0x3a4>
     d4a:	20 64       	ori	r18, 0x40	; 64
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <vfprintf+0xd0>
     d4e:	8c 36       	cpi	r24, 0x6C	; 108
     d50:	11 f4       	brne	.+4      	; 0xd56 <vfprintf+0xcc>
     d52:	20 68       	ori	r18, 0x80	; 128
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <vfprintf+0xd0>
     d56:	88 36       	cpi	r24, 0x68	; 104
     d58:	41 f4       	brne	.+16     	; 0xd6a <vfprintf+0xe0>
     d5a:	f6 01       	movw	r30, r12
     d5c:	93 fd       	sbrc	r25, 3
     d5e:	85 91       	lpm	r24, Z+
     d60:	93 ff       	sbrs	r25, 3
     d62:	81 91       	ld	r24, Z+
     d64:	6f 01       	movw	r12, r30
     d66:	81 11       	cpse	r24, r1
     d68:	c0 cf       	rjmp	.-128    	; 0xcea <vfprintf+0x60>
     d6a:	98 2f       	mov	r25, r24
     d6c:	95 54       	subi	r25, 0x45	; 69
     d6e:	93 30       	cpi	r25, 0x03	; 3
     d70:	18 f0       	brcs	.+6      	; 0xd78 <vfprintf+0xee>
     d72:	90 52       	subi	r25, 0x20	; 32
     d74:	93 30       	cpi	r25, 0x03	; 3
     d76:	28 f4       	brcc	.+10     	; 0xd82 <vfprintf+0xf8>
     d78:	0c 5f       	subi	r16, 0xFC	; 252
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	ff e3       	ldi	r31, 0x3F	; 63
     d7e:	f9 83       	std	Y+1, r31	; 0x01
     d80:	0d c0       	rjmp	.+26     	; 0xd9c <vfprintf+0x112>
     d82:	83 36       	cpi	r24, 0x63	; 99
     d84:	31 f0       	breq	.+12     	; 0xd92 <vfprintf+0x108>
     d86:	83 37       	cpi	r24, 0x73	; 115
     d88:	71 f0       	breq	.+28     	; 0xda6 <vfprintf+0x11c>
     d8a:	83 35       	cpi	r24, 0x53	; 83
     d8c:	09 f0       	breq	.+2      	; 0xd90 <vfprintf+0x106>
     d8e:	5e c0       	rjmp	.+188    	; 0xe4c <vfprintf+0x1c2>
     d90:	23 c0       	rjmp	.+70     	; 0xdd8 <vfprintf+0x14e>
     d92:	f8 01       	movw	r30, r16
     d94:	80 81       	ld	r24, Z
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	0e 5f       	subi	r16, 0xFE	; 254
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	66 24       	eor	r6, r6
     d9e:	63 94       	inc	r6
     da0:	71 2c       	mov	r7, r1
     da2:	54 01       	movw	r10, r8
     da4:	15 c0       	rjmp	.+42     	; 0xdd0 <vfprintf+0x146>
     da6:	28 01       	movw	r4, r16
     da8:	f2 e0       	ldi	r31, 0x02	; 2
     daa:	4f 0e       	add	r4, r31
     dac:	51 1c       	adc	r5, r1
     dae:	f8 01       	movw	r30, r16
     db0:	a0 80       	ld	r10, Z
     db2:	b1 80       	ldd	r11, Z+1	; 0x01
     db4:	26 ff       	sbrs	r18, 6
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <vfprintf+0x134>
     db8:	67 2d       	mov	r22, r7
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <vfprintf+0x138>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	c5 01       	movw	r24, r10
     dc4:	2c 87       	std	Y+12, r18	; 0x0c
     dc6:	0e 94 2d 08 	call	0x105a	; 0x105a <strnlen>
     dca:	3c 01       	movw	r6, r24
     dcc:	82 01       	movw	r16, r4
     dce:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd0:	6f e7       	ldi	r22, 0x7F	; 127
     dd2:	26 2e       	mov	r2, r22
     dd4:	22 22       	and	r2, r18
     dd6:	18 c0       	rjmp	.+48     	; 0xe08 <vfprintf+0x17e>
     dd8:	28 01       	movw	r4, r16
     dda:	f2 e0       	ldi	r31, 0x02	; 2
     ddc:	4f 0e       	add	r4, r31
     dde:	51 1c       	adc	r5, r1
     de0:	f8 01       	movw	r30, r16
     de2:	a0 80       	ld	r10, Z
     de4:	b1 80       	ldd	r11, Z+1	; 0x01
     de6:	26 ff       	sbrs	r18, 6
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <vfprintf+0x166>
     dea:	67 2d       	mov	r22, r7
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x16a>
     df0:	6f ef       	ldi	r22, 0xFF	; 255
     df2:	7f ef       	ldi	r23, 0xFF	; 255
     df4:	c5 01       	movw	r24, r10
     df6:	2c 87       	std	Y+12, r18	; 0x0c
     df8:	0e 94 22 08 	call	0x1044	; 0x1044 <strnlen_P>
     dfc:	3c 01       	movw	r6, r24
     dfe:	2c 85       	ldd	r18, Y+12	; 0x0c
     e00:	50 e8       	ldi	r21, 0x80	; 128
     e02:	25 2e       	mov	r2, r21
     e04:	22 2a       	or	r2, r18
     e06:	82 01       	movw	r16, r4
     e08:	23 fc       	sbrc	r2, 3
     e0a:	1c c0       	rjmp	.+56     	; 0xe44 <vfprintf+0x1ba>
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <vfprintf+0x190>
     e0e:	b7 01       	movw	r22, r14
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 38 08 	call	0x1070	; 0x1070 <fputc>
     e18:	3a 94       	dec	r3
     e1a:	83 2d       	mov	r24, r3
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	68 16       	cp	r6, r24
     e20:	79 06       	cpc	r7, r25
     e22:	a8 f3       	brcs	.-22     	; 0xe0e <vfprintf+0x184>
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <vfprintf+0x1ba>
     e26:	f5 01       	movw	r30, r10
     e28:	27 fc       	sbrc	r2, 7
     e2a:	85 91       	lpm	r24, Z+
     e2c:	27 fe       	sbrs	r2, 7
     e2e:	81 91       	ld	r24, Z+
     e30:	5f 01       	movw	r10, r30
     e32:	b7 01       	movw	r22, r14
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 38 08 	call	0x1070	; 0x1070 <fputc>
     e3a:	31 10       	cpse	r3, r1
     e3c:	3a 94       	dec	r3
     e3e:	f1 e0       	ldi	r31, 0x01	; 1
     e40:	6f 1a       	sub	r6, r31
     e42:	71 08       	sbc	r7, r1
     e44:	61 14       	cp	r6, r1
     e46:	71 04       	cpc	r7, r1
     e48:	71 f7       	brne	.-36     	; 0xe26 <vfprintf+0x19c>
     e4a:	ee c0       	rjmp	.+476    	; 0x1028 <vfprintf+0x39e>
     e4c:	84 36       	cpi	r24, 0x64	; 100
     e4e:	11 f0       	breq	.+4      	; 0xe54 <vfprintf+0x1ca>
     e50:	89 36       	cpi	r24, 0x69	; 105
     e52:	41 f5       	brne	.+80     	; 0xea4 <vfprintf+0x21a>
     e54:	f8 01       	movw	r30, r16
     e56:	27 ff       	sbrs	r18, 7
     e58:	07 c0       	rjmp	.+14     	; 0xe68 <vfprintf+0x1de>
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	0c 5f       	subi	r16, 0xFC	; 252
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <vfprintf+0x1ee>
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	88 27       	eor	r24, r24
     e6e:	77 fd       	sbrc	r23, 7
     e70:	80 95       	com	r24
     e72:	98 2f       	mov	r25, r24
     e74:	0e 5f       	subi	r16, 0xFE	; 254
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	4f e6       	ldi	r20, 0x6F	; 111
     e7a:	64 2e       	mov	r6, r20
     e7c:	62 22       	and	r6, r18
     e7e:	97 ff       	sbrs	r25, 7
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <vfprintf+0x20a>
     e82:	90 95       	com	r25
     e84:	80 95       	com	r24
     e86:	70 95       	com	r23
     e88:	61 95       	neg	r22
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	f0 e8       	ldi	r31, 0x80	; 128
     e92:	6f 2a       	or	r6, r31
     e94:	2a e0       	ldi	r18, 0x0A	; 10
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	a4 01       	movw	r20, r8
     e9a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__ultoa_invert>
     e9e:	a8 2e       	mov	r10, r24
     ea0:	a8 18       	sub	r10, r8
     ea2:	44 c0       	rjmp	.+136    	; 0xf2c <vfprintf+0x2a2>
     ea4:	85 37       	cpi	r24, 0x75	; 117
     ea6:	31 f4       	brne	.+12     	; 0xeb4 <vfprintf+0x22a>
     ea8:	3f ee       	ldi	r19, 0xEF	; 239
     eaa:	b3 2e       	mov	r11, r19
     eac:	b2 22       	and	r11, r18
     eae:	2a e0       	ldi	r18, 0x0A	; 10
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	24 c0       	rjmp	.+72     	; 0xefc <vfprintf+0x272>
     eb4:	99 ef       	ldi	r25, 0xF9	; 249
     eb6:	b9 2e       	mov	r11, r25
     eb8:	b2 22       	and	r11, r18
     eba:	8f 36       	cpi	r24, 0x6F	; 111
     ebc:	b9 f0       	breq	.+46     	; 0xeec <vfprintf+0x262>
     ebe:	20 f4       	brcc	.+8      	; 0xec8 <vfprintf+0x23e>
     ec0:	88 35       	cpi	r24, 0x58	; 88
     ec2:	09 f0       	breq	.+2      	; 0xec6 <vfprintf+0x23c>
     ec4:	b4 c0       	rjmp	.+360    	; 0x102e <vfprintf+0x3a4>
     ec6:	0d c0       	rjmp	.+26     	; 0xee2 <vfprintf+0x258>
     ec8:	80 37       	cpi	r24, 0x70	; 112
     eca:	21 f0       	breq	.+8      	; 0xed4 <vfprintf+0x24a>
     ecc:	88 37       	cpi	r24, 0x78	; 120
     ece:	09 f0       	breq	.+2      	; 0xed2 <vfprintf+0x248>
     ed0:	ae c0       	rjmp	.+348    	; 0x102e <vfprintf+0x3a4>
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0x24e>
     ed4:	20 e1       	ldi	r18, 0x10	; 16
     ed6:	b2 2a       	or	r11, r18
     ed8:	b4 fe       	sbrs	r11, 4
     eda:	0b c0       	rjmp	.+22     	; 0xef2 <vfprintf+0x268>
     edc:	84 e0       	ldi	r24, 0x04	; 4
     ede:	b8 2a       	or	r11, r24
     ee0:	08 c0       	rjmp	.+16     	; 0xef2 <vfprintf+0x268>
     ee2:	24 ff       	sbrs	r18, 4
     ee4:	09 c0       	rjmp	.+18     	; 0xef8 <vfprintf+0x26e>
     ee6:	e6 e0       	ldi	r30, 0x06	; 6
     ee8:	be 2a       	or	r11, r30
     eea:	06 c0       	rjmp	.+12     	; 0xef8 <vfprintf+0x26e>
     eec:	28 e0       	ldi	r18, 0x08	; 8
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <vfprintf+0x272>
     ef2:	20 e1       	ldi	r18, 0x10	; 16
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <vfprintf+0x272>
     ef8:	20 e1       	ldi	r18, 0x10	; 16
     efa:	32 e0       	ldi	r19, 0x02	; 2
     efc:	f8 01       	movw	r30, r16
     efe:	b7 fe       	sbrs	r11, 7
     f00:	07 c0       	rjmp	.+14     	; 0xf10 <vfprintf+0x286>
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	0c 5f       	subi	r16, 0xFC	; 252
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <vfprintf+0x292>
     f10:	60 81       	ld	r22, Z
     f12:	71 81       	ldd	r23, Z+1	; 0x01
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 5f       	subi	r16, 0xFE	; 254
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	a4 01       	movw	r20, r8
     f1e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__ultoa_invert>
     f22:	a8 2e       	mov	r10, r24
     f24:	a8 18       	sub	r10, r8
     f26:	8f e7       	ldi	r24, 0x7F	; 127
     f28:	68 2e       	mov	r6, r24
     f2a:	6b 20       	and	r6, r11
     f2c:	66 fe       	sbrs	r6, 6
     f2e:	0b c0       	rjmp	.+22     	; 0xf46 <vfprintf+0x2bc>
     f30:	36 2d       	mov	r19, r6
     f32:	3e 7f       	andi	r19, 0xFE	; 254
     f34:	a7 14       	cp	r10, r7
     f36:	50 f4       	brcc	.+20     	; 0xf4c <vfprintf+0x2c2>
     f38:	64 fe       	sbrs	r6, 4
     f3a:	0a c0       	rjmp	.+20     	; 0xf50 <vfprintf+0x2c6>
     f3c:	62 fc       	sbrc	r6, 2
     f3e:	08 c0       	rjmp	.+16     	; 0xf50 <vfprintf+0x2c6>
     f40:	36 2d       	mov	r19, r6
     f42:	3e 7e       	andi	r19, 0xEE	; 238
     f44:	05 c0       	rjmp	.+10     	; 0xf50 <vfprintf+0x2c6>
     f46:	ba 2c       	mov	r11, r10
     f48:	36 2d       	mov	r19, r6
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <vfprintf+0x2c8>
     f4c:	ba 2c       	mov	r11, r10
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <vfprintf+0x2c8>
     f50:	b7 2c       	mov	r11, r7
     f52:	34 ff       	sbrs	r19, 4
     f54:	0d c0       	rjmp	.+26     	; 0xf70 <vfprintf+0x2e6>
     f56:	fe 01       	movw	r30, r28
     f58:	ea 0d       	add	r30, r10
     f5a:	f1 1d       	adc	r31, r1
     f5c:	80 81       	ld	r24, Z
     f5e:	80 33       	cpi	r24, 0x30	; 48
     f60:	11 f4       	brne	.+4      	; 0xf66 <vfprintf+0x2dc>
     f62:	39 7e       	andi	r19, 0xE9	; 233
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <vfprintf+0x2ee>
     f66:	32 ff       	sbrs	r19, 2
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <vfprintf+0x2ec>
     f6a:	b3 94       	inc	r11
     f6c:	b3 94       	inc	r11
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <vfprintf+0x2ee>
     f70:	83 2f       	mov	r24, r19
     f72:	86 78       	andi	r24, 0x86	; 134
     f74:	09 f0       	breq	.+2      	; 0xf78 <vfprintf+0x2ee>
     f76:	b3 94       	inc	r11
     f78:	33 fd       	sbrc	r19, 3
     f7a:	14 c0       	rjmp	.+40     	; 0xfa4 <vfprintf+0x31a>
     f7c:	30 ff       	sbrs	r19, 0
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <vfprintf+0x314>
     f80:	7a 2c       	mov	r7, r10
     f82:	b3 14       	cp	r11, r3
     f84:	60 f4       	brcc	.+24     	; 0xf9e <vfprintf+0x314>
     f86:	73 0c       	add	r7, r3
     f88:	7b 18       	sub	r7, r11
     f8a:	b3 2c       	mov	r11, r3
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <vfprintf+0x314>
     f8e:	b7 01       	movw	r22, r14
     f90:	80 e2       	ldi	r24, 0x20	; 32
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	3c 87       	std	Y+12, r19	; 0x0c
     f96:	0e 94 38 08 	call	0x1070	; 0x1070 <fputc>
     f9a:	b3 94       	inc	r11
     f9c:	3c 85       	ldd	r19, Y+12	; 0x0c
     f9e:	b3 14       	cp	r11, r3
     fa0:	b0 f3       	brcs	.-20     	; 0xf8e <vfprintf+0x304>
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <vfprintf+0x322>
     fa4:	b3 14       	cp	r11, r3
     fa6:	10 f4       	brcc	.+4      	; 0xfac <vfprintf+0x322>
     fa8:	3b 18       	sub	r3, r11
     faa:	01 c0       	rjmp	.+2      	; 0xfae <vfprintf+0x324>
     fac:	31 2c       	mov	r3, r1
     fae:	34 ff       	sbrs	r19, 4
     fb0:	12 c0       	rjmp	.+36     	; 0xfd6 <vfprintf+0x34c>
     fb2:	b7 01       	movw	r22, r14
     fb4:	80 e3       	ldi	r24, 0x30	; 48
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	3c 87       	std	Y+12, r19	; 0x0c
     fba:	0e 94 38 08 	call	0x1070	; 0x1070 <fputc>
     fbe:	3c 85       	ldd	r19, Y+12	; 0x0c
     fc0:	32 ff       	sbrs	r19, 2
     fc2:	1e c0       	rjmp	.+60     	; 0x1000 <vfprintf+0x376>
     fc4:	31 ff       	sbrs	r19, 1
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <vfprintf+0x344>
     fc8:	88 e5       	ldi	r24, 0x58	; 88
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <vfprintf+0x348>
     fce:	88 e7       	ldi	r24, 0x78	; 120
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b7 01       	movw	r22, r14
     fd4:	0c c0       	rjmp	.+24     	; 0xfee <vfprintf+0x364>
     fd6:	83 2f       	mov	r24, r19
     fd8:	86 78       	andi	r24, 0x86	; 134
     fda:	91 f0       	breq	.+36     	; 0x1000 <vfprintf+0x376>
     fdc:	31 fd       	sbrc	r19, 1
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0x35a>
     fe0:	80 e2       	ldi	r24, 0x20	; 32
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <vfprintf+0x35c>
     fe4:	8b e2       	ldi	r24, 0x2B	; 43
     fe6:	37 fd       	sbrc	r19, 7
     fe8:	8d e2       	ldi	r24, 0x2D	; 45
     fea:	b7 01       	movw	r22, r14
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 38 08 	call	0x1070	; 0x1070 <fputc>
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <vfprintf+0x376>
     ff4:	b7 01       	movw	r22, r14
     ff6:	80 e3       	ldi	r24, 0x30	; 48
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 38 08 	call	0x1070	; 0x1070 <fputc>
     ffe:	7a 94       	dec	r7
    1000:	a7 14       	cp	r10, r7
    1002:	c0 f3       	brcs	.-16     	; 0xff4 <vfprintf+0x36a>
    1004:	aa 94       	dec	r10
    1006:	f4 01       	movw	r30, r8
    1008:	ea 0d       	add	r30, r10
    100a:	f1 1d       	adc	r31, r1
    100c:	b7 01       	movw	r22, r14
    100e:	80 81       	ld	r24, Z
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 38 08 	call	0x1070	; 0x1070 <fputc>
    1016:	a1 10       	cpse	r10, r1
    1018:	f5 cf       	rjmp	.-22     	; 0x1004 <vfprintf+0x37a>
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <vfprintf+0x39e>
    101c:	b7 01       	movw	r22, r14
    101e:	80 e2       	ldi	r24, 0x20	; 32
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 38 08 	call	0x1070	; 0x1070 <fputc>
    1026:	3a 94       	dec	r3
    1028:	31 10       	cpse	r3, r1
    102a:	f8 cf       	rjmp	.-16     	; 0x101c <vfprintf+0x392>
    102c:	42 ce       	rjmp	.-892    	; 0xcb2 <vfprintf+0x28>
    102e:	f7 01       	movw	r30, r14
    1030:	26 81       	ldd	r18, Z+6	; 0x06
    1032:	37 81       	ldd	r19, Z+7	; 0x07
    1034:	02 c0       	rjmp	.+4      	; 0x103a <vfprintf+0x3b0>
    1036:	2f ef       	ldi	r18, 0xFF	; 255
    1038:	3f ef       	ldi	r19, 0xFF	; 255
    103a:	c9 01       	movw	r24, r18
    103c:	2c 96       	adiw	r28, 0x0c	; 12
    103e:	e2 e1       	ldi	r30, 0x12	; 18
    1040:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__epilogue_restores__>

00001044 <strnlen_P>:
    1044:	fc 01       	movw	r30, r24
    1046:	05 90       	lpm	r0, Z+
    1048:	61 50       	subi	r22, 0x01	; 1
    104a:	70 40       	sbci	r23, 0x00	; 0
    104c:	01 10       	cpse	r0, r1
    104e:	d8 f7       	brcc	.-10     	; 0x1046 <strnlen_P+0x2>
    1050:	80 95       	com	r24
    1052:	90 95       	com	r25
    1054:	8e 0f       	add	r24, r30
    1056:	9f 1f       	adc	r25, r31
    1058:	08 95       	ret

0000105a <strnlen>:
    105a:	fc 01       	movw	r30, r24
    105c:	61 50       	subi	r22, 0x01	; 1
    105e:	70 40       	sbci	r23, 0x00	; 0
    1060:	01 90       	ld	r0, Z+
    1062:	01 10       	cpse	r0, r1
    1064:	d8 f7       	brcc	.-10     	; 0x105c <strnlen+0x2>
    1066:	80 95       	com	r24
    1068:	90 95       	com	r25
    106a:	8e 0f       	add	r24, r30
    106c:	9f 1f       	adc	r25, r31
    106e:	08 95       	ret

00001070 <fputc>:
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	8c 01       	movw	r16, r24
    107a:	eb 01       	movw	r28, r22
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	81 fd       	sbrc	r24, 1
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <fputc+0x18>
    1082:	0f ef       	ldi	r16, 0xFF	; 255
    1084:	1f ef       	ldi	r17, 0xFF	; 255
    1086:	1a c0       	rjmp	.+52     	; 0x10bc <fputc+0x4c>
    1088:	82 ff       	sbrs	r24, 2
    108a:	0d c0       	rjmp	.+26     	; 0x10a6 <fputc+0x36>
    108c:	2e 81       	ldd	r18, Y+6	; 0x06
    108e:	3f 81       	ldd	r19, Y+7	; 0x07
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	28 17       	cp	r18, r24
    1096:	39 07       	cpc	r19, r25
    1098:	64 f4       	brge	.+24     	; 0x10b2 <fputc+0x42>
    109a:	e8 81       	ld	r30, Y
    109c:	f9 81       	ldd	r31, Y+1	; 0x01
    109e:	01 93       	st	Z+, r16
    10a0:	f9 83       	std	Y+1, r31	; 0x01
    10a2:	e8 83       	st	Y, r30
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <fputc+0x42>
    10a6:	e8 85       	ldd	r30, Y+8	; 0x08
    10a8:	f9 85       	ldd	r31, Y+9	; 0x09
    10aa:	80 2f       	mov	r24, r16
    10ac:	09 95       	icall
    10ae:	89 2b       	or	r24, r25
    10b0:	41 f7       	brne	.-48     	; 0x1082 <fputc+0x12>
    10b2:	8e 81       	ldd	r24, Y+6	; 0x06
    10b4:	9f 81       	ldd	r25, Y+7	; 0x07
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	9f 83       	std	Y+7, r25	; 0x07
    10ba:	8e 83       	std	Y+6, r24	; 0x06
    10bc:	c8 01       	movw	r24, r16
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <__ultoa_invert>:
    10c8:	fa 01       	movw	r30, r20
    10ca:	aa 27       	eor	r26, r26
    10cc:	28 30       	cpi	r18, 0x08	; 8
    10ce:	51 f1       	breq	.+84     	; 0x1124 <__ultoa_invert+0x5c>
    10d0:	20 31       	cpi	r18, 0x10	; 16
    10d2:	81 f1       	breq	.+96     	; 0x1134 <__ultoa_invert+0x6c>
    10d4:	e8 94       	clt
    10d6:	6f 93       	push	r22
    10d8:	6e 7f       	andi	r22, 0xFE	; 254
    10da:	6e 5f       	subi	r22, 0xFE	; 254
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	af 4f       	sbci	r26, 0xFF	; 255
    10e4:	b1 e0       	ldi	r27, 0x01	; 1
    10e6:	3e d0       	rcall	.+124    	; 0x1164 <__ultoa_invert+0x9c>
    10e8:	b4 e0       	ldi	r27, 0x04	; 4
    10ea:	3c d0       	rcall	.+120    	; 0x1164 <__ultoa_invert+0x9c>
    10ec:	67 0f       	add	r22, r23
    10ee:	78 1f       	adc	r23, r24
    10f0:	89 1f       	adc	r24, r25
    10f2:	9a 1f       	adc	r25, r26
    10f4:	a1 1d       	adc	r26, r1
    10f6:	68 0f       	add	r22, r24
    10f8:	79 1f       	adc	r23, r25
    10fa:	8a 1f       	adc	r24, r26
    10fc:	91 1d       	adc	r25, r1
    10fe:	a1 1d       	adc	r26, r1
    1100:	6a 0f       	add	r22, r26
    1102:	71 1d       	adc	r23, r1
    1104:	81 1d       	adc	r24, r1
    1106:	91 1d       	adc	r25, r1
    1108:	a1 1d       	adc	r26, r1
    110a:	20 d0       	rcall	.+64     	; 0x114c <__ultoa_invert+0x84>
    110c:	09 f4       	brne	.+2      	; 0x1110 <__ultoa_invert+0x48>
    110e:	68 94       	set
    1110:	3f 91       	pop	r19
    1112:	2a e0       	ldi	r18, 0x0A	; 10
    1114:	26 9f       	mul	r18, r22
    1116:	11 24       	eor	r1, r1
    1118:	30 19       	sub	r19, r0
    111a:	30 5d       	subi	r19, 0xD0	; 208
    111c:	31 93       	st	Z+, r19
    111e:	de f6       	brtc	.-74     	; 0x10d6 <__ultoa_invert+0xe>
    1120:	cf 01       	movw	r24, r30
    1122:	08 95       	ret
    1124:	46 2f       	mov	r20, r22
    1126:	47 70       	andi	r20, 0x07	; 7
    1128:	40 5d       	subi	r20, 0xD0	; 208
    112a:	41 93       	st	Z+, r20
    112c:	b3 e0       	ldi	r27, 0x03	; 3
    112e:	0f d0       	rcall	.+30     	; 0x114e <__ultoa_invert+0x86>
    1130:	c9 f7       	brne	.-14     	; 0x1124 <__ultoa_invert+0x5c>
    1132:	f6 cf       	rjmp	.-20     	; 0x1120 <__ultoa_invert+0x58>
    1134:	46 2f       	mov	r20, r22
    1136:	4f 70       	andi	r20, 0x0F	; 15
    1138:	40 5d       	subi	r20, 0xD0	; 208
    113a:	4a 33       	cpi	r20, 0x3A	; 58
    113c:	18 f0       	brcs	.+6      	; 0x1144 <__ultoa_invert+0x7c>
    113e:	49 5d       	subi	r20, 0xD9	; 217
    1140:	31 fd       	sbrc	r19, 1
    1142:	40 52       	subi	r20, 0x20	; 32
    1144:	41 93       	st	Z+, r20
    1146:	02 d0       	rcall	.+4      	; 0x114c <__ultoa_invert+0x84>
    1148:	a9 f7       	brne	.-22     	; 0x1134 <__ultoa_invert+0x6c>
    114a:	ea cf       	rjmp	.-44     	; 0x1120 <__ultoa_invert+0x58>
    114c:	b4 e0       	ldi	r27, 0x04	; 4
    114e:	a6 95       	lsr	r26
    1150:	97 95       	ror	r25
    1152:	87 95       	ror	r24
    1154:	77 95       	ror	r23
    1156:	67 95       	ror	r22
    1158:	ba 95       	dec	r27
    115a:	c9 f7       	brne	.-14     	; 0x114e <__ultoa_invert+0x86>
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	61 05       	cpc	r22, r1
    1160:	71 05       	cpc	r23, r1
    1162:	08 95       	ret
    1164:	9b 01       	movw	r18, r22
    1166:	ac 01       	movw	r20, r24
    1168:	0a 2e       	mov	r0, r26
    116a:	06 94       	lsr	r0
    116c:	57 95       	ror	r21
    116e:	47 95       	ror	r20
    1170:	37 95       	ror	r19
    1172:	27 95       	ror	r18
    1174:	ba 95       	dec	r27
    1176:	c9 f7       	brne	.-14     	; 0x116a <__ultoa_invert+0xa2>
    1178:	62 0f       	add	r22, r18
    117a:	73 1f       	adc	r23, r19
    117c:	84 1f       	adc	r24, r20
    117e:	95 1f       	adc	r25, r21
    1180:	a0 1d       	adc	r26, r0
    1182:	08 95       	ret

00001184 <__prologue_saves__>:
    1184:	2f 92       	push	r2
    1186:	3f 92       	push	r3
    1188:	4f 92       	push	r4
    118a:	5f 92       	push	r5
    118c:	6f 92       	push	r6
    118e:	7f 92       	push	r7
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	ca 1b       	sub	r28, r26
    11ae:	db 0b       	sbc	r29, r27
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	09 94       	ijmp

000011bc <__epilogue_restores__>:
    11bc:	2a 88       	ldd	r2, Y+18	; 0x12
    11be:	39 88       	ldd	r3, Y+17	; 0x11
    11c0:	48 88       	ldd	r4, Y+16	; 0x10
    11c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    11c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    11c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    11c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    11ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    11cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    11ce:	b9 84       	ldd	r11, Y+9	; 0x09
    11d0:	c8 84       	ldd	r12, Y+8	; 0x08
    11d2:	df 80       	ldd	r13, Y+7	; 0x07
    11d4:	ee 80       	ldd	r14, Y+6	; 0x06
    11d6:	fd 80       	ldd	r15, Y+5	; 0x05
    11d8:	0c 81       	ldd	r16, Y+4	; 0x04
    11da:	1b 81       	ldd	r17, Y+3	; 0x03
    11dc:	aa 81       	ldd	r26, Y+2	; 0x02
    11de:	b9 81       	ldd	r27, Y+1	; 0x01
    11e0:	ce 0f       	add	r28, r30
    11e2:	d1 1d       	adc	r29, r1
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	ed 01       	movw	r28, r26
    11f0:	08 95       	ret

000011f2 <_exit>:
    11f2:	f8 94       	cli

000011f4 <__stop_program>:
    11f4:	ff cf       	rjmp	.-2      	; 0x11f4 <__stop_program>
